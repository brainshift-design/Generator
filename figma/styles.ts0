function figCreateColorStyle(styles, genStyle)
{
    const figStyle = figma.createPaintStyle();


    figStyle.name = genStyle.nodeName;

    setStylePaints(figStyle, genStyle);


    //figStyle.setPluginData('type',       genStyle.type);
    figStyle.setPluginData('nodeId',     genStyle.nodeId);
    //figStyle.setPluginData('Name',   genStyle.nodeName);
    //figStyle.setPluginData('styleIndex', genStyle.styleIndex.toString());


    styles.push(figStyle);


    return figStyle;
}



function figUpdateStyles(msg)
{
    let curNodeId = NULL;
    let figStyles = null;

    for (const genStyle of msg.styles)
    {
        if (genStyle.nodeId != curNodeId)
        {
            curNodeId = genStyle.nodeId;
            
            figStyles = figStyleArrays.find(a => a.nodeId == genStyle.nodeId);

            if (!figStyles) 
                figStyleArrays.push(figStyles = {nodeId: genStyle.nodeId, styles: []});
        }


        const figStyle = figStyles.styles[genStyle.styleId];


        const paintStyles = figma.getLocalPaintStyles();

        const removed = !paintStyles.find(s => 
        {
            const nodeId = s.getPluginData('nodeId');
            //const styleIndex = s.getPluginData('styleIndex');
 
            return nodeId     == genStyle.nodeId;
                //&& styleIndex == genStyle.styleIndex;
        });

        
        if (   isValid(figStyle)
            && removed)
            removeFrom(figStyles.styles, figStyle);


        if (  !isValid(figStyle)
            || removed) // no existing style, create new style
            figCreateColorStyle(figStyles.styles, genStyle);

        else if (figStyle.getPluginData('type') == genStyle.type.toString()) // update existing style
            figUpdateColorStyle(figStyle, genStyle);

        else // delete existing style, create new style
        {
            figStyle.remove();
            figCreateColorStyle(figStyles.styles, genStyle);
        }
    }
}



function figUpdateColorStyle(figStyle, genStyle)
{
    setStylePaints(figStyle, genStyle);

    figStyle.name = genStyle.nodeName;
}



///////////////////////////////////////////////////////////////////////////////////////////////////



function getStylePaints(stylePaints)
{
    const paints = [];

    for (const _paint of stylePaints)
    {
        const fill = _paint[1].split(' ');

        switch (_paint[0])
        {
            case 'SOLID':
                paints.push(
                {
                    type: 'SOLID', 
                    color: {
                        r: Math.min(Math.max(0, parseFloat(fill[0]) / 0xff), 1), 
                        g: Math.min(Math.max(0, parseFloat(fill[1]) / 0xff), 1), 
                        b: Math.min(Math.max(0, parseFloat(fill[2]) / 0xff), 1) },
                    opacity: Math.min(Math.max(0, parseFloat(fill[3]) / 100), 1)
                });

                break;
        }
    }

    return paints;
}



function setStylePaints(style, src)
{
    if (   !!src.paints
        &&   src.paints.length > 0)
        style.paints = getStylePaints(src.paints);
    else
        style.paints = [];
}

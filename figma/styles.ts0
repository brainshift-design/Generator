function figGetAllLocalColorStyles(nodeId, px, py)
{
    const _styles = figma.getLocalPaintStyles();


    const styles = new Array();

    for (const _style of _styles)
    {
        const _nodeId   = _style.getPluginData('nodeId');
        const _existing = _style.getPluginData('existing');

        const existing = !!_existing;

        const style = { 
            id:       _style.id,
            nodeId:   _nodeId,
            name:     _style.name,
            existing: existing,
            paints:   new Array()
        };

        
        let onlyPaint = true;

        for (const _paint of _style.paints)
        {
            if (_paint.type == 'SOLID')
            {
                style.paints.push([
                    _paint.color.r,
                    _paint.color.g,
                    _paint.color.b,
                    _paint.opacity]);
            }
            else
            {
                onlyPaint = false;
                break;
            }
        }


        if (onlyPaint)
            styles.push(style);
    }


    figPostMessageToUi({
        cmd:   'uiReturnFigGetAllLocalColorStyles',
        nodeId: nodeId,
        px:     px,
        py:     py,
        styles: JSON.stringify(styles)});
}



function figLinkNodeToExistingColorStyle(nodeId, styleId)
{
    const localStyles = figma.getLocalPaintStyles();

    if (styleId != NULL) figLinkColorStyle(localStyles, nodeId, styleId);
    else                 figClearColorStyle(localStyles, nodeId);
}



function figLinkColorStyle(localStyles, nodeId, styleId, clearExisting = true)
{
    const figStyles = figStyleArrays.find(a => a.nodeId == nodeId);
    
    if (   figStyles 
        && clearExisting) 
        figClearColorStyle(localStyles, nodeId);


    const figStyle = localStyles.find(s => s.id == styleId);
    consoleAssert(!!figStyle, 'figStyle should be found here');


    figStyle.setPluginData('type',     COLOR_STYLE);
    figStyle.setPluginData('nodeId',   nodeId);
    figStyle.setPluginData('existing', boolToString(true));


    figStyleArrays.push({
        nodeId:   nodeId, 
        existing: true, 
        styles:   [figStyle]});


    return figStyle;
}



function figClearColorStyle(localStyles, nodeId)
{
    const figStyle = localStyles.find(s => s.getPluginData('nodeId') == nodeId);
    consoleAssert(!!figStyle, 'figStyle should be found here');

    if (figStyle) // could have been deleted
    {
        figStyle.setPluginData('type',     NULL);
        figStyle.setPluginData('nodeId',   NULL);
        figStyle.setPluginData('existing', NULL);

        removeFromArrayWhere(figStyleArrays, a => a.nodeId == nodeId);
    }

    return figStyle;
}



function figCreateColorStyle(styles, genStyle)
{
    const figStyle = figma.createPaintStyle();


    figStyle.setPluginData('type',     genStyle[FO_TYPE   ]);
    figStyle.setPluginData('nodeId',   genStyle[FO_NODE_ID]);
    //figStyle.setPluginData('existing', boolToString(genStyle.existing));

    figStyle.name = genStyle[FO_STYLE_NAME];


    setStylePaints(figStyle, genStyle);


    styles.push(figStyle);


    figPostMessageToUi({
        cmd:    'uiSetStyleId',
        nodeId:  genStyle[FO_NODE_ID],
        styleId: figStyle.id });

    
    return figStyle;
}



function figUpdateStyles(msg)
{
    let curNodeId = NULL;
    let figStyles;


    for (const genStyle of msg.styles)
    {
        if (genStyle[FO_NODE_ID] != curNodeId)
        {
            curNodeId = genStyle[FO_NODE_ID];
            
            figStyles = figStyleArrays.find(a => a.nodeId == genStyle[FO_NODE_ID]);

            if (!figStyles) 
            {
                figStyles = {
                    nodeId:   genStyle[FO_NODE_ID], 
                    //existing: genStyle.existing, 
                    styles:   [] };

                figStyleArrays.push(figStyles);
            }
        }
        else
            figStyles = null;


        const figStyle    = figStyles.styles[0];
        
        const localStyles = figma.getLocalPaintStyles();
        const localStyle  = localStyles.find(s => s.getPluginData('nodeId') == genStyle[FO_NODE_ID]);


        if (    isValid(figStyle)
            && !isValid(localStyle)) // removed
        {
            removeFrom(figStyles.styles, figStyle);
        }


        const existing = 
               isValid(figStyle  )
            && isValid(localStyle)
            && figStyle.getPluginData('existing');


        if (   !isValid(figStyle  )
            || !isValid(localStyle)) // no existing style, create new style
        {
            if (!existing)
            {
                styleChangingFromGenerator = true;

                figLinkNodeToExistingColorStyle(
                    genStyle[FO_NODE_ID ],
                    genStyle[FO_STYLE_ID]);
                //figCreateColorStyle(figStyles.styles, genStyle);
            }
        }
        else if (isValid(figStyle) 
              && figStyle.getPluginData('type') == genStyle[FO_TYPE]) // update existing style
        {
            styleChangingFromGenerator = true;
            figUpdateColorStyle(localStyle, genStyle);
        }
        // else // delete existing style, create new style
        // {
        //     if (!existing)
        //     {
        //         localStyle.remove();
        //         styleChangingFromGenerator = true;
        //         figCreateColorStyle(figStyles.styles, genStyle);
        //     }
        // }
    }
}



function figUpdateColorStyle(figStyle, genStyle)
{
    setStylePaints(figStyle, genStyle);

    figStyle.name = genStyle[FO_STYLE_NAME];
}



function getStylePaints(stylePaints)
{
    const paints = new Array();

    for (const _paint of stylePaints)
    {
        const fill = _paint[1].split(' ');

        switch (_paint[0])
        {
            case 'SOLID':
                paints.push(
                {
                    type:  'SOLID', 
                    color: { r: Math.min(Math.max(0, parseFloat(fill[0]) / 0xff), 1), 
                             g: Math.min(Math.max(0, parseFloat(fill[1]) / 0xff), 1), 
                             b: Math.min(Math.max(0, parseFloat(fill[2]) / 0xff), 1) },
                    opacity: Math.min(Math.max(0, parseFloat(fill[3]) / 100), 1)
                });

                break;
        }
    }

    return paints;
}



function setStylePaints(figStyle, genStyle)
{
    if (!isEmpty(genStyle[FO_STYLE_PAINTS]))
        figStyle.paints = getStylePaints(genStyle[FO_STYLE_PAINTS]);
    else
        figStyle.paints = [];
}

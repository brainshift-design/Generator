function figGetAllLocalColorStyles(nodeId, px, py)
{
    const _styles = figma.getLocalPaintStyles();


    const styles = new Array();

    for (const _style of _styles)
    {
        const _nodeId   = _style.getPluginData('nodeId');
        const _existing = _style.getPluginData('existing');

        const existing = !!_existing;

        const style = { 
            id:       _style.id,
            nodeId:   _nodeId,
            name:     _style.name,
            existing: existing,
            paints:   new Array()
        };

        
        let onlyPaint = true;

        for (const _paint of _style.paints)
        {
            if (_paint.type == 'SOLID')
            {
                style.paints.push([
                    _paint.color.r,
                    _paint.color.g,
                    _paint.color.b]);
            }
            else
            {
                onlyPaint = false;
                break;
            }
        }


        if (onlyPaint)
            styles.push(style);
    }


    figPostMessageToUI({
        cmd:   'uiReturnFigGetAllLocalColorStyles',
        nodeId: nodeId,
        px:     px,
        py:     py,
        styles: JSON.stringify(styles)});
}



function figLinkNodeToExistingColorStyle(nodeId, styleName)
{
    const localStyles = figma.getLocalPaintStyles();

    if (styleName != NULL) figLinkColorStyle(localStyles, nodeId, styleName);
    else                   figClearColorStyle(localStyles, nodeId);
}



function figLinkColorStyle(localStyles, nodeId, styleName, clearExisting = true)
{
    const figStyles = figStyleArrays.find(a => a.nodeId == nodeId);
    
    if (   figStyles 
        && clearExisting) 
        figClearColorStyle(localStyles, nodeId);


    const figStyle = localStyles.find(s => s.name == styleName);
    console.assert(!!figStyle, 'figStyle should be found here');

    figStyle.setPluginData('type',     COLOR_STYLE);
    figStyle.setPluginData('nodeId',   nodeId);
    figStyle.setPluginData('existing', boolToString(true));

    figStyleArrays.push({nodeId: nodeId, styles: [figStyle]});
}



function figClearColorStyle(localStyles, nodeId)
{
    const figStyle = localStyles.find(s => s.getPluginData('nodeId') == nodeId);
    console.assert(!!figStyle, 'figStyle should be found here');

    figStyle.setPluginData('type',     NULL);
    figStyle.setPluginData('nodeId',   NULL);
    figStyle.setPluginData('existing', NULL);

    removeFromArrayWhere(figStyleArrays, a => a.nodeId == nodeId);
}



function figCreateColorStyle(styles, genStyle)
{
    const figStyle = figma.createPaintStyle();


    figStyle.setPluginData('type',     genStyle.type);
    figStyle.setPluginData('nodeId',   genStyle.nodeId);
    figStyle.setPluginData('existing', boolToString(genStyle.existing));

    figStyle.name = genStyle.styleName;


    setStylePaints(figStyle, genStyle);


    styles.push(figStyle);


    return figStyle;
}



function figUpdateStyles(msg)
{
    let curNodeId = NULL;
    let figStyles;


    for (const genStyle of msg.styles)
    {
        if (genStyle.nodeId != curNodeId)
        {
            curNodeId = genStyle.nodeId;
            
            figStyles = figStyleArrays.find(a => a.nodeId == genStyle.nodeId);

            if (!figStyles) 
            {
                figStyles = {nodeId: genStyle.nodeId, styles: []};
                figStyleArrays.push(figStyles);
            }
        }
        else
            figStyles = null;


        const figStyle    = figStyles.styles[0];
        const existing    = figStyle && figStyle.getPluginData('existing');
        
        const localStyles = figma.getLocalPaintStyles();
        const localStyle  = localStyles.find(s => s.getPluginData('nodeId') == genStyle.nodeId);


        if (    isValid(figStyle)
            && !localStyle) // removed
            removeFrom(figStyles.styles, figStyle);


        if (   !isValid(figStyle)
            || !localStyle) // no existing style, create new style
        {
            if (!existing)
                figCreateColorStyle(figStyles.styles, genStyle);
        }
        else if (figStyle.getPluginData('type') == genStyle.type) // update existing style
        {
            figUpdateColorStyle(localStyle, genStyle);
        }
        else // delete existing style, create new style
        {
            if (!existing)
            {
                localStyle.remove();
                figCreateColorStyle(figStyles.styles, genStyle);
            }
        }
    }
}



function figUpdateColorStyle(figStyle, genStyle)
{
    setStylePaints(figStyle, genStyle);

    figStyle.name = genStyle.nodeName;
}



function getStylePaints(stylePaints)
{
    const paints = new Array();

    for (const _paint of stylePaints)
    {
        const fill = _paint[1].split(' ');

        switch (_paint[0])
        {
            case 'SOLID':
                paints.push(
                {
                    type: 'SOLID', 
                    color: {
                        r: Math.min(Math.max(0, parseFloat(fill[0]) / 0xff), 1), 
                        g: Math.min(Math.max(0, parseFloat(fill[1]) / 0xff), 1), 
                        b: Math.min(Math.max(0, parseFloat(fill[2]) / 0xff), 1) },
                    opacity: Math.min(Math.max(0, parseFloat(fill[3]) / 100), 1)
                });

                break;
        }
    }

    return paints;
}



function setStylePaints(style, src)
{
    if (   !!src.paints
        &&   src.paints.length > 0)
        style.paints = getStylePaints(src.paints);
    else
        style.paints = [];
}

function figUpdateStyles(msg)
{
    let curNodeId = NULL;
    let figStyles = null;

    for (const genStyle of msg.styles)
    {
        if (genStyle.nodeId != curNodeId)
        {
            curNodeId  = genStyle.nodeId;
            
            figStyles = figObjectArrays.find(a => a.nodeId == genStyle.nodeId);

            if (!figStyles) 
                figObjectArrays.push(figStyles = {nodeId: genStyle.nodeId, objects: []});
        }

        const figStyle = figStyles[genStyle.id];


        if (  !figStyle 
            || figStyle.removed) // no existing object, create new object
            figCreateColorStyle(genStyle);

        else if (figStyle.getPluginData('type') == genStyle.type.toString()) // update existing object
            figUpdateColorStyle(figStyle, genStyle);

        else // delete existing object, create new object
        {
            figStyle.remove();
            figCreateColorStyle(genStyle);
        }
    }
}



///////////////////////////////////////////////////////////////////////////////////////////////////



function getStylePaints(stylePaints)
{
    const paints = [];

    for (const _paint of stylePaints)
    {
        const fill = _paint[1].split(' ');

        switch (_paint[0])
        {
            case 'SOLID':
                paints.push(
                {
                    type: 'SOLID', 
                    color: {
                        r: Math.min(Math.max(0, parseFloat(fill[0]) / 0xff), 1), 
                        g: Math.min(Math.max(0, parseFloat(fill[1]) / 0xff), 1), 
                        b: Math.min(Math.max(0, parseFloat(fill[2]) / 0xff), 1) },
                    opacity: Math.min(Math.max(0, parseFloat(fill[3]) / 100), 1)
                });

                break;
        }
    }

    return paints;
}



function figCreateColorStyle(stl)
{
    const style = figma.createPaintStyle();

    style.name = stl.nodeName;//makeObjectName(stl);

    setStylePaints(style, stl);


    style.setPluginData('id',     stl.styleId.toString());
    style.setPluginData('type',   stl.type   .toString());
    style.setPluginData('nodeId', stl.nodeId .toString());


    return style;
}



function figUpdateColorStyle(figStyle, genStyle)
{
    setStylePaints(figStyle, genStyle);
}



///////////////////////////////////////////////////////////////////////////////////////////////////



function setStylePaints(style, src)
{
    if (   !!src.paints
        &&   src.paints.length > 0)
        style.paints = getStylePaints(src.paints);
    else
        style.paints = [];
}

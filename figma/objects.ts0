function figCreateRect(obj, name)
{
    //console.log(obj);

    const rect = figma.createRectangle();

    rect.name = name;

    rect.x = obj.x;
    rect.y = obj.y;

    setObjectFills  (rect, obj);
    setObjectStrokes(rect, obj);

    rect.resize(
        Math.max(0.01, obj.width), 
        Math.max(0.01, obj.height));
        
    rect.rotation     = obj.angle;
    rect.cornerRadius = obj.round;

    return rect;
}



function figUpdateRect(figRect, genRect)
{
    figRect.x = genRect.x;
    figRect.y = genRect.y;

    if (   figRect.width  != genRect.width
        || figRect.height != genRect.height)
    {
        figRect.resize(
            Math.max(0.01, genRect.width), 
            Math.max(0.01, genRect.height));
    }

    figRect.rotation     = genRect.angle;
    figRect.cornerRadius = genRect.round;


    setObjectFills  (figRect, genRect);
    setObjectStrokes(figRect, genRect);
}



///////////////////////////////////////////////////////////////////////////////////////////////////



function figCreateLine(obj, name)
{
    //console.log(obj);

    const line = figma.createLine();

    line.name = name;

    line.x = obj.x;
    line.y = obj.y;
    
    line.fills = [{type: 'SOLID', color: {r: 0, g: 0, b: 0}}];
    
    line.resize(Math.max(0.01, obj.width), 0);
        
    line.rotation = obj.angle;

    return line;
}



function figUpdateLine(figLine, genLine)
{
    figLine.x = genLine.x;
    figLine.y = genLine.y;

    if (figLine.width != genLine.width)
        figLine.resize(Math.max(0.01, genLine.width), 0);

    figLine.rotation = genLine.angle;
}



///////////////////////////////////////////////////////////////////////////////////////////////////



function figCreateEllipse(obj, name)
{
    //console.log(obj);

    const ellipse = figma.createEllipse();

    ellipse.name = name;

    ellipse.x = obj.x;
    ellipse.y = obj.y;
    
    ellipse.fills = [{type: 'SOLID', color: {r: 0, g: 0, b: 0}}];
    
    ellipse.resize(
        Math.max(0.01, obj.width), 
        Math.max(0.01, obj.height));
        
    ellipse.rotation = obj.angle;

    return ellipse;
}



function figUpdateEllipse(figEllipse, genEllipse)
{
    figEllipse.x = genEllipse.x;
    figEllipse.y = genEllipse.y;

    if (   figEllipse.width  != genEllipse.width
        || figEllipse.height != genEllipse.height)
    {
        figEllipse.resize(
            Math.max(0.01, genEllipse.width), 
            Math.max(0.01, genEllipse.height));
    }

    figEllipse.rotation = genEllipse.angle;
}



///////////////////////////////////////////////////////////////////////////////////////////////////



function figCreatePolygon(obj, name)
{
    //console.log(obj);

    const poly = figma.createPolygon();

    poly.name = name;

    poly.x = obj.x;
    poly.y = obj.y;
    
    poly.fills = [{type: 'SOLID', color: {r: 0, g: 0, b: 0}}];
    
    poly.resize(
        Math.max(0.01, obj.width), 
        Math.max(0.01, obj.height));
        
    poly.rotation     = obj.angle;
    poly.cornerRadius = obj.round;
    poly.pointCount   = obj.corners;

    return poly;
}



function figUpdatePolygon(figPoly, genPoly)
{
    figPoly.x = genPoly.x;
    figPoly.y = genPoly.y;

    if (   figPoly.width  != genPoly.width
        || figPoly.height != genPoly.height)
    {
        figPoly.resize(
            Math.max(0.01, genPoly.width), 
            Math.max(0.01, genPoly.height));
    }

    figPoly.rotation     = genPoly.angle;
    figPoly.cornerRadius = genPoly.round;
    figPoly.pointCount   = genPoly.corners;
}



///////////////////////////////////////////////////////////////////////////////////////////////////



function figCreateStar(obj, name)
{
    //console.log(obj);

    const star = figma.createStar();

    star.name = name;

    star.x = obj.x;
    star.y = obj.y;
    
    star.fills = [{type: 'SOLID', color: {r: 0, g: 0, b: 0}}];
    
    star.resize(
        Math.max(0.01, obj.width), 
        Math.max(0.01, obj.height));
        
    star.rotation     = obj.angle;
    star.cornerRadius = obj.round;
    star.pointCount   = obj.points;
    star.innerRadius  = obj.convex / 100;

    return star;
}



function figUpdateStar(figStar, genStar)
{
    figStar.x = genStar.x;
    figStar.y = genStar.y;

    if (   figStar.width  != genStar.width
        || figStar.height != genStar.height)
    {
        figStar.resize(
            Math.max(0.01, genStar.width), 
            Math.max(0.01, genStar.height));
    }

    figStar.rotation     = genStar.angle;
    figStar.cornerRadius = genStar.round;
    figStar.pointCount   = genStar.points;
    figStar.innerRadius  = genStar.convex / 100;
}



///////////////////////////////////////////////////////////////////////////////////////////////////



// function figCreateFrame()
// {
//     let frame = figma.createFrame();

//     frame.name = 'Generator';

//     let tx : Paint = {type: 'SOLID', color: {r: 0, g: 0, b: 0}, opacity: 0};
//     frame.fills = [tx];

//     //frame.resize(
//     //    (nCols*rectSize + (nCols-1)*hgap),
//     //    (nRows*rectSize + (nRows-1)*hgap));

//     return frame;
// }



///////////////////////////////////////////////////////////////////////////////////////////////////

function getObjectFills(objFills)
{
    const fills = [];

    for (const _fill of objFills)
    {
        const fill = _fill[1].split(' ');

        switch (_fill[0])
        {
            case 'SOLID':
                fills.push(
                {
                    type: 'SOLID', 
                    color: {
                        r: Math.min(Math.max(0, parseFloat(fill[0]) / 0xff), 1), 
                        g: Math.min(Math.max(0, parseFloat(fill[1]) / 0xff), 1), 
                        b: Math.min(Math.max(0, parseFloat(fill[2]) / 0xff), 1) },
                    opacity: Math.min(Math.max(0, parseFloat(fill[3]) / 100), 1)
                });

                break;
        }
    }

    return fills;
}



function setObjectFills(obj, src)
{
    if (   !!src.fills
        && src.fills.length > 0)
        obj.fills = getObjectFills(src.fills);
    else
        obj.fills = [];//{type: 'SOLID', color: {r: 0.85, g: 0.85, b: 0.85}}];
}



function setObjectStrokes(obj, src)
{
    if (   src.strokes != null
        && src.strokes.length > 0)
    {
        obj.strokes = getObjectFills(src.strokes);

        obj.strokeWeight     = Math.max(0, src.strokeWeight);
        obj.strokeAlign      = src.strokeAlign;
        obj.strokeJoin       = src.strokeJoin;
        obj.strokeMiterLimit = Math.min(Math.max(0, src.strokeMiterLimit), 16);
    }

    else
        obj.strokes = [];
}
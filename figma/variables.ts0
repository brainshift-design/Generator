function figGetAllLocalVariables(nodeId, px, py)
{
    const localVars = figma.variables.getLocalVariables();

    
    const variables = new Array();

    for (const _var of localVars)
    {
        //const _nodeId = _var.getPluginData('nodeId');

        const variable = 
        { 
            id:            _var.id,
            resolvedType:  _var.resolvedType,
            name:          _var.name,
            collectionName: figma.variables.getVariableCollectionById(_var.variableCollectionId).name
        };

        variables.push(variable);
    }


    figPostMessageToUi(
    {
        cmd:         'uiReturnFigGetAllLocalVariables',
        nodeId:       nodeId,
        px:           px,
        py:           py,
        variables:    JSON.stringify(variables),
        nCollections: figma.variables.getLocalVariableCollections().length
    });
}


function getVariableValues(varIds)
{
    const localVars = figma.variables.getLocalVariables();

    const variables = varIds.map(id => localVars.find(v => v.id == id));
    let   values    = [];


    for (let i = 0; i < varIds.length; i++)
    {
        const variable = variables[i];
        
        const collection = 
            variable != undefined // deleted
            ? figma.variables.getVariableCollectionById(variable.variableCollectionId)
            : null;
        
            
        if (collection)
        {
            const vals = [];

            for (const mode of collection.modes)
                vals.push(variable.valuesByMode[mode.modeId]);

            values.push(
            {
                id:           varIds[i],
                name:         variable.name, 
                resolvedType: variable.resolvedType, 
                value:        vals[0]
            });
        }
        else
        {
            values.push(
            {
                id:           varIds[i], 
                resolvedType: NULL, 
                value:        null
            });
        }
    }


    return values;
}



function figLinkNodeToVariable(nodeId, varId)
{
    const localVars = figma.variables.getLocalVariables();

    figLinkVariable(localVars, nodeId, varId);
}



function figUpdateVariable(varId, value)
{
    const localVars  = figma.variables.getLocalVariables();

    const variable = localVars.find(v => v.id == varId);
    if (!variable) return;

    const collection = figma.variables.getVariableCollectionById(variable.variableCollectionId);

    if (variable.resolvedType == 'BOOLEAN')
        value = value != 0;
    
    if (value !== null)
        variable.setValueForMode(collection.modes[0].modeId, value);
}



function figLinkVariable(localVars, nodeId, varId)
{
    const variable = localVars.find(v => v.id == varId);
    const values   = [];

    if (variable)
    {
        const collection = figma.variables.getVariableCollectionById(variable.variableCollectionId);
        
        for (const mode of collection.modes)
            values.push(variable.valuesByMode[mode.modeId]);
    }


    figPostMessageToUi(
    {
        cmd:         'uiReturnFigLinkNodeToVariable',
        nodeId:       nodeId,
        variableId:   variable ? variable.id           : NULL,
        variableName: variable ? variable.name         : '',
        resolvedType: variable ? variable.resolvedType : NULL,
        values:       values
    });

    return variable;
}
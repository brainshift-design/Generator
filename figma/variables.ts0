function figGetAllLocalVariables(nodeId, px, py)
{
    const localVars = figma.variables.getLocalVariables();

    
    const variables = new Array();

    for (const _var of localVars)
    {
        //const _nodeId = _var.getPluginData('nodeId');

        const variable = 
        { 
            id:            _var.id,
            resolvedType:  _var.resolvedType,
            name:          _var.name,
            collectionName: figma.variables.getVariableCollectionById(_var.variableCollectionId).name
        };

        variables.push(variable);
    }


    figPostMessageToUi(
    {
        cmd:         'uiReturnFigGetAllLocalVariables',
        nodeId:       nodeId,
        px:           px,
        py:           py,
        variables:    JSON.stringify(variables),
        nCollections: figma.variables.getLocalVariableCollections().length
    });
}


function getVariableValues(varIds)
{
    const localVars = figma.variables.getLocalVariables();

    const variables = varIds.map(id => localVars.find(v => v.id == id));
    let   values    = [];


    for (let i = 0; i < varIds.length; i++)
    {
        const variable = variables[i];
        
        const collection = 
            variable != undefined // deleted
            ? figma.variables.getVariableCollectionById(variable.variableCollectionId)
            : null;
        
            
        if (collection)
        {
            const vals = [];


            for (const mode of collection.modes)
            {
                let _var  = variable;
                let value = _var.valuesByMode[mode.modeId];
                
                while (value.type === 'VARIABLE_ALIAS')
                {
                    _var  = figma.variables.getVariableById(value.id);
                    value = _var.valuesByMode[mode.modeId];
                }

                vals.push(value);
            }


            values.push(
            {
                id:           varIds[i],
                name:         variable.name, 
                resolvedType: variable.resolvedType, 
                value:        vals[0]
            });
        }
        else
        {
            values.push(
            {
                id:           varIds[i], 
                resolvedType: NULL, 
                value:        null
            });
        }
    }


    return values;
}



function figLinkNodeToVariable(nodeId, varId)
{
    const localVars = figma.variables.getLocalVariables();

    figLinkVariable(localVars, nodeId, varId);
}



function figUpdateVariable(varId, value)
{
    const localVars = figma.variables.getLocalVariables();


    let variable = localVars.find(v => v.id == varId);
    if (!variable) return;


    const collection = figma.variables.getVariableCollectionById(variable.variableCollectionId);
    const mode       = collection.modes[0];

    
    // resolve if alias

    let curValue = variable.valuesByMode[mode.modeId];
    
    while (curValue.hasOwnProperty('type')
        && curValue['type'] === 'VARIABLE_ALIAS')
    {
        variable = figma.variables.getVariableById(curValue['id']);
        curValue = variable.valuesByMode[mode.modeId];
    }


    if (value !== null)
    {
        if (variable.resolvedType == 'BOOLEAN')
            value = value != 0;
        else
            variable.setValueForMode(mode.modeId, value);
    }
}



function figLinkVariable(localVars, nodeId, varId)
{
    let variable = localVars.find(v => v.id == varId);
    if (!variable) return null;


    const [resolvedVar, values] = figGetResolvedVariableValues(variable);


    figPostMessageToUi(
    {
        cmd:         'uiReturnFigLinkNodeToVariable',
        nodeId:       nodeId,
        variableId:   resolvedVar ? resolvedVar.id           : NULL,
        variableName: resolvedVar ? resolvedVar.name         : '',
        resolvedType: resolvedVar ? resolvedVar.resolvedType : NULL,
        values:       values
    });


    return resolvedVar;
}



function figGetResolvedVariableValues(variable)
{
    const values = [];

    
    if (!variable)
        return values;


    const collection = figma.variables.getVariableCollectionById(variable.variableCollectionId);
            
    for (const mode of collection.modes)
    {
        let value = variable.valuesByMode[mode.modeId];
        
        while (value.type === 'VARIABLE_ALIAS')
        {
            variable = figma.variables.getVariableById(value.id);
            value    = variable.valuesByMode[mode.modeId];
        }
        
        values.push(value);
    }


    return [variable, values];
}
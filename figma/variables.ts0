function figGetAllLocalVariables(nodeId, px, py)
{
    const localVars        = figma.variables.getLocalVariables();

    
    const variables = new Array();

    for (const _var of localVars)
    {
        //const _nodeId = _var.getPluginData('nodeId');

        const variable = 
        { 
            id:            _var.id,
            resolvedType:  _var.resolvedType,
            name:          _var.name,
            collectionName: figma.variables.getVariableCollectionById(_var.variableCollectionId).name
        };

        variables.push(variable);
    }


    figPostMessageToUi(
    {
        cmd:         'uiReturnFigGetAllLocalVariables',
        nodeId:       nodeId,
        px:           px,
        py:           py,
        variables:    JSON.stringify(variables),
        nCollections: figma.variables.getLocalVariableCollections().length
    });
}


function figLinkNodeToVariable(nodeId, varId)
{
    const localVars = figma.variables.getLocalVariables();

    figLinkVariable(localVars, nodeId, varId);
}



function figUpdateVariable(varId, value)
{
    const localVars  = figma.variables.getLocalVariables();

    const variable = localVars.find(v => v.id == varId);
    if (!variable) return;

    const collection = figma.variables.getVariableCollectionById(variable.variableCollectionId);

    if (variable.resolvedType == 'BOOLEAN')
        value = value != 0;
    
    if (value !== null)
        variable.setValueForMode(collection.modes[0].modeId, value);
}



function figLinkVariable(localVars, nodeId, varId)
{
    const variable = localVars.find(v => v.id == varId);
    const values   = [];

    if (variable)
    {
        const collection = figma.variables.getVariableCollectionById(variable.variableCollectionId);
        
        for (const mode of collection.modes)
            values.push(variable.valuesByMode[mode.modeId]);
    }


    figPostMessageToUi(
    {
        cmd:         'uiReturnFigLinkNodeToVariable',
        nodeId:       nodeId,
        variableId:   variable ? variable.id           : NULL,
        resolvedType: variable ? variable.resolvedType : NULL,
        values:       values
    });

    return variable;
}
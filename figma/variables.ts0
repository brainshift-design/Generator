function genVariableIsValid(genVariable)
{
    return genVariable[FO_VARIABLE_TYPE ] != null
        && genVariable[FO_VARIABLE_VALUE] != null;
}



async function figCreateVariableAsync(genVariable)
{
//     if (!genRectIsValid(genVariable))
//         return null;


//     const figVariable = null;//figma.createRectangle();

//     await figUpdateVariableAsync(figVariable, genVariable, true);

//     return figVariable;
}



//async function figUpdateVariableAsync(figVariable, genVariable, isValid = false)
//{
//     if (   !isValid
//         && !genVariableIsValid(genVariable))
//         return;


//     const foundCorners = genVariable[FO_EFFECTS].findIndex(e => e[0] == 'ROUND_CORNERS');

//     if (foundCorners > -1)
//     {
//         const corners = genVariable[FO_EFFECTS][foundCorners];

//         figVariable.topLeftRadius     = corners[1];
//         figVariable.topRightRadius    = corners[2];
//         figVariable.bottomLeftRadius  = corners[3];
//         figVariable.bottomRightRadius = corners[4];
//     }
//     else
//         figVariable.cornerRadius = genVariable[FO_RECT_ROUND];


//     if (transform)
//         setObjectTransform(figVariable, genVariable);
    
//     setObjectProps(figVariable, genVariable, addProps);


//     figUpdateStrokeSides(figVariable, genVariable);
//}



async function figCreateVariableCollectionAsync(name)
{
    const collection = await figma.variables.createVariableCollection(name);

    collection.setPluginData('userId',    figma.currentUser.id);
    collection.setPluginData('sessionId', figma.currentUser.sessionId.toString());

    return collection;
}



async function figGetVariableFromData(nodeId, varName)
{
    const collections = await figma.variables.getLocalVariableCollectionsAsync();

    for (const collection of collections)
    {
        for (const varId of collection.variableIds)
        {        
            const variable = await figma.variables.getVariableByIdAsync(varId);

            if (   variable.getPluginData('nodeId') == nodeId
                && variable.name == varName)
                return variable;
        }
    }

    return null;
}



function figGetAllLocalVariables(nodeId, px, py)
{
    figma.variables.getLocalVariablesAsync().then(async localVars =>
    {
        const variables = new Array();


        for (const _var of localVars)
        {
            try
            {
                const collection = await figma.variables.getVariableCollectionByIdAsync(_var.variableCollectionId);
                const values     = await figGetResolvedVariableValuesAsync(_var);
                
                const variable = 
                { 
                    id:             _var.id,
                    resolvedType:   _var.resolvedType,
                    name:           collection.name + '/' + _var.name,
                    resolvedValue:  values[1][0]
                };

                variables.push(variable);
            }
            catch (ex)
            {

            }
        }


        figma.variables.getLocalVariableCollectionsAsync().then(async collections =>
        {
            figPostMessageToUi(
            {
                cmd:         'uiReturnFigGetAllLocalVariables',
                nodeId:       nodeId,
                px:           px,
                py:           py,
                variables:    JSON.stringify(variables),
                nCollections: collections.length
            });
        });
    });
}



async function getVariableValuesAsync(varIds)
{
    const localVars = await figma.variables.getLocalVariablesAsync();

    const variables = varIds.map(id => localVars.find(v => v.id == id));
    let   values    = [];


    for (let i = 0; i < varIds.length; i++)
    {
        const variable = variables[i];
        
        const collection = 
            variable != undefined // deleted
            ? (await figma.variables.getVariableCollectionByIdAsync(variable.variableCollectionId))
            : null;
        
            
        if (collection)
        {
            const vals = [];


            for (const mode of collection.modes)
            {
                let _var  = variable;
                let value = _var.valuesByMode[mode.modeId];
                
                while (value && value.type === 'VARIABLE_ALIAS')
                {
                    _var  = await figma.variables.getVariableByIdAsync(value.id);
                    value = _var.valuesByMode[mode.modeId];
                }

                vals.push(value);
            }


            values.push(
            {
                id:            varIds[i],
                name:          collection.name + '/' + variable.name, 
                resolvedType:  variable.resolvedType,
                resolvedValue: vals[0]
            });
        }
        else
        {
            values.push(
            {
                id:            varIds[i], 
                resolvedType:  NULL, 
                resolvedValue: null
            });
        }
    }


    return values;
}



async function figUpdateVariableAsync(varId, varName, value)
{
    let variable = await figma.variables.getVariableByIdAsync(varId);
    if (!variable) return;


    let collection = await figma.variables.getVariableCollectionByIdAsync(variable.variableCollectionId);
    let mode       = collection.modes[0];

    
    // resolve if alias

    let curValue = variable.valuesByMode[mode.modeId];

    
    while (curValue
        && curValue.hasOwnProperty('type')
        && curValue['type'] === 'VARIABLE_ALIAS')
    {
        variable   = await figma.variables.getVariableByIdAsync(curValue['id']);
        curValue   = variable.valuesByMode[mode.modeId];
    
        collection = await figma.variables.getVariableCollectionByIdAsync(variable.variableCollectionId);
        mode       = collection.modes[0];
    }


    const _varCollectionName = varName.split('/')[0];

    if (collection.name != _varCollectionName)
    {
        let newCollection = await figGetVariableCollectionByNameAsync(_varCollectionName);

        if (!newCollection)
            newCollection = await figCreateVariableCollectionAsync(_varCollectionName);

        variable = await figMoveVariableToCollectionAsync(variable, newCollection);
    }


    const _varName = varName.split('/').slice(1).join('/');
    
    if (variable.name != _varName)
        variable.name = _varName;
    
    
    if (value !== null)
    {
        try
        {
            if (variable.resolvedType == 'BOOLEAN')
                value = value > 0; //!= 0;
            else
                variable.setValueForMode(mode.modeId, value);
        }
        catch (ex)
        {
            // this is to catch the misfire from variable polling
            // during the short period when the variables have been relinked,
            // but the node's linked variableId hasn't been updated yet
        }
    }
}



async function figGetVariableByNameAsync(name, collectionId = '')
{
    const localVars = await figma.variables.getLocalVariablesAsync();

    return collectionId != ''
        ? localVars.find(v => 
               v.name == name
            && v.variableCollectionId == collectionId)
        : localVars.find(v => 
            v.name == name);
}
  


async function figGetVariableCollectionByIdAsync(id) 
{
    const collections = await figma.variables.getLocalVariableCollectionsAsync();
    return collections.find(c => c.id === id);
}    
  


async function figGetVariableCollectionByNameAsync(name) 
{
    const collections = await figma.variables.getLocalVariableCollectionsAsync();
    return collections.find(c => c.name === name);
}    
  


async function figMoveVariableToCollectionAsync(oldVariable, newCollection) 
{
    if (!oldVariable || !newCollection) 
        throw new Error('both variable and collection must be provided');
  

    const existing = await figGetVariableByNameAsync(oldVariable.name, newCollection.id);

    if (existing)
    {
        figNotify('Variable names must be unique within a collection', '');
        return oldVariable;
    }


    // copy modes

    const oldCollection = await figGetVariableCollectionByIdAsync(oldVariable.variableCollectionId);

    for (const oldMode of oldCollection.modes)
    {
        let newMode = newCollection.modes.find(m => m.name == oldMode.name);
        if (!newMode) newCollection.addMode(oldMode.name);
    }


    const newVariable = figma.variables.createVariable(
        oldVariable.name,
        newCollection,
        oldVariable.resolvedType);
  

    // copy values by mode

    for (const newMode of newCollection.modes)
    {
        const oldMode = oldCollection.modes.find(m => m.name == newMode.name);
        const value   = oldVariable.valuesByMode[oldMode.modeId];

        newVariable.setValueForMode(newMode.modeId, value);
    }
  

    figRelinkObjectVariables(oldVariable, newVariable);
  

    figPostMessageToUi(
    {
        cmd:          'uiReturnFigRelinkVariable',
        oldVariableId: oldVariable.id,
        newVariableId: newVariable.id
    });


    oldVariable.remove();
  

    return newVariable;
}
  


function figRelinkObjectVariables(oldVariable, newVariable)
{
    figTraverseNode(figma.root, oldVariable, newVariable);
}



function figTraverseNode(node, oldVariable, newVariable)
{
    // update bound variables on the node

    if (node.boundVariables) 
    {
        for (const property in node.boundVariables) 
        {
            const binding = node.boundVariables[property];

            if (   binding 
                && binding.id == oldVariable.id)
                node.setBoundVariable(property, newVariable);
        }
    }


    // update text node variable bindings
    
    if (node.type == 'TEXT') 
    {
        for (let i = 0; i < node.characters.length; i++) 
        {
            const boundVariable = node.getVariableForCharacterRange(i, i+1);
          
            if (   boundVariable 
                && boundVariable.id == oldVariable.id)
                node.setRangeVariableId(i, i+1, newVariable.id);
        }
    }


    if ('children' in node) 
    {
        for (const child of node.children) 
            figTraverseNode(child, oldVariable, newVariable);
    }
}



function figMakeValue(value, resolvedType) 
{
    switch (resolvedType) 
    {
        case 'NUMBER':  return Number (value);
        case 'BOOLEAN': return Boolean(value);
        case 'STRING':  return String (value);
        case 'COLOR':   return { r: value.r, g: value.g, b: value.b, a: value.a };
        default:
            console.error(`Unsupported resolved type: ${resolvedType}`);
            return value;
    }
}



// async function figLinkNodeToVariableAsync(nodeId, varId, varType, varName, collection = null)
// {
//     const localVars = await figma.variables.getLocalVariablesAsync();
    
//     if (!collection)
//     {
//         const collections = await figma.variables.getLocalVariableCollectionsAsync();

//         collection = 
//             collections.length > 0 
//             ? collections[0]
//             : null;
//     }

//     return collection
//         ? await figLinkVariableAsync(localVars, nodeId, varId, varType, varName, collection)
//         : null;
// }



async function figLinkNodeToVariableAsync(nodeId, varId)
{
    const variable = await figma.variables.getVariableByIdAsync(varId);

    console.assert(variable != null, 'variable must exist');

    
    variable.setPluginData('userId',    figma.currentUser.id);
    variable.setPluginData('sessionId', figma.currentUser.sessionId.toString());
    variable.setPluginData('nodeId',    nodeId);


    const [resolvedVar, values] = await figGetResolvedVariableValuesAsync(variable);


    // figPostMessageToUi(
    // {
    //     cmd:         'uiReturnFigLinkNodeToVariable',
    //     nodeId:       nodeId,
    //     variableId:   resolvedVar ? resolvedVar.id           : NULL,
    //     variableName: resolvedVar ? resolvedVar.name         : '',
    //     resolvedType: resolvedVar ? resolvedVar.resolvedType : NULL,
    //     values:       values
    // });


    return resolvedVar;
}



async function figGetResolvedVariableValuesAsync(variable)
{
    const values = [];

    
    if (!variable)
        return values;


    const collection = await figma.variables.getVariableCollectionByIdAsync(variable.variableCollectionId);
            
    for (const mode of collection.modes)
    {
        let value = variable.valuesByMode[mode.modeId];
        
        while (   value
               && value['type'] === 'VARIABLE_ALIAS')
        {
            variable = await figma.variables.getVariableByIdAsync(value.id);
            value    = variable.valuesByMode[mode.modeId];
        }
        
        values.push(value);
    }


    return [variable, values];
}



function figDeleteTempVariableCollection(forceDelete = false)
{
    if (tempVariableCollection)
        tempVariableCollection.remove();
}
function genVariableIsValid(genVariable)
{
    return genVariable[FO_VARIABLE_TYPE ] != null
        && genVariable[FO_VARIABLE_VALUE] != null;
}



async function figCreateVariableAsync(genVariable)
{
//     if (!genRectIsValid(genVariable))
//         return null;


//     const figVariable = null;//figma.createRectangle();

//     await figUpdateVariableAsync(figVariable, genVariable, true);

//     return figVariable;
}



//async function figUpdateVariableAsync(figVariable, genVariable, isValid = false)
//{
//     if (   !isValid
//         && !genVariableIsValid(genVariable))
//         return;


//     const foundCorners = genVariable[FO_EFFECTS].findIndex(e => e[0] == 'ROUND_CORNERS');

//     if (foundCorners > -1)
//     {
//         const corners = genVariable[FO_EFFECTS][foundCorners];

//         figVariable.topLeftRadius     = corners[1];
//         figVariable.topRightRadius    = corners[2];
//         figVariable.bottomLeftRadius  = corners[3];
//         figVariable.bottomRightRadius = corners[4];
//     }
//     else
//         figVariable.cornerRadius = genVariable[FO_RECT_ROUND];


//     if (transform)
//         setObjectTransform(figVariable, genVariable);
    
//     setObjectProps(figVariable, genVariable, addProps);


//     figUpdateStrokeSides(figVariable, genVariable);
//}



async function figGetVariableCollectionByNameAsync(name)
{
    const collections = await figma.variables.getLocalVariableCollectionsAsync();

    for (const collection of collections)
    {
        if (collection.name == name)
            return collection;
    }

    return null;
}



async function figUpdateTempVariableCollection()
{
    const tempCollectionName = PLUGIN_LOGO + 'â€‚' + PLUGIN_NAME;

    tempVariableCollection = await figGetVariableCollectionByNameAsync(tempCollectionName);

    if (!tempVariableCollection)
    {
        tempVariableCollection = await figma.variables.createVariableCollection(tempCollectionName);

        tempVariableCollection.setPluginData('userId',    figma.currentUser.id);
        tempVariableCollection.setPluginData('sessionId', figma.currentUser.sessionId.toString());
    }
}



async function figGetVariableFromData(nodeId, varName)
{
    const collections = await figma.variables.getLocalVariableCollectionsAsync();

    for (const collection of collections)
    {
        for (const varId of collection.variableIds)
        {        
            const variable = await figma.variables.getVariableByIdAsync(varId);

            if (   variable.getPluginData('nodeId') == nodeId
                && variable.name == varName)
                return variable;
        }
    }

    return null;
}



function figGetAllLocalVariables(nodeId, px, py)
{
    figma.variables.getLocalVariablesAsync().then(async localVars =>
    {
        const variables = new Array();


        for (const _var of localVars)
        {
            try
            {
                const collection = await figma.variables.getVariableCollectionByIdAsync(_var.variableCollectionId);

                const variable = 
                { 
                    id:             _var.id,
                    resolvedType:   _var.resolvedType,
                    name:           _var.name,
                    collectionName: collection.name
                };

                variables.push(variable);
            }
            catch (ex)
            {

            }
        }


        figma.variables.getLocalVariableCollectionsAsync().then(async collections =>
        {
            figPostMessageToUi(
            {
                cmd:         'uiReturnFigGetAllLocalVariables',
                nodeId:       nodeId,
                px:           px,
                py:           py,
                variables:    JSON.stringify(variables),
                nCollections: collections.length
            });
        });
    });
}



async function getVariableValuesAsync(varIds)
{
    const localVars = await figma.variables.getLocalVariablesAsync();

    const variables = varIds.map(id => localVars.find(v => v.id == id));
    let   values    = [];


    for (let i = 0; i < varIds.length; i++)
    {
        const variable = variables[i];
        
        const collection = 
            variable != undefined // deleted
            ? (await figma.variables.getVariableCollectionByIdAsync(variable.variableCollectionId))
            : null;
        
            
        if (collection)
        {
            const vals = [];


            for (const mode of collection.modes)
            {
                let _var  = variable;
                let value = _var.valuesByMode[mode.modeId];
                
                while (value && value.type === 'VARIABLE_ALIAS')
                {
                    _var  = await figma.variables.getVariableByIdAsync(value.id);
                    value = _var.valuesByMode[mode.modeId];
                }

                vals.push(value);
            }


            values.push(
            {
                id:           varIds[i],
                name:         variable.name, 
                resolvedType: variable.resolvedType,
                value:        vals[0]
            });
        }
        else
        {
            values.push(
            {
                id:           varIds[i], 
                resolvedType: NULL, 
                value:        null
            });
        }
    }


    return values;
}



function figLinkNodeToVariable(nodeId, varId, varType, varName)
{
    figma.variables.getLocalVariablesAsync().then(async (localVars) =>
    {
        const collections = await figma.variables.getLocalVariableCollectionsAsync();

        if (collections.length > 0)
            figLinkVariableAsync(localVars, nodeId, varId, varType, varName, collections[0]);
    });
}



async function figUpdateVariableAsync(varId, value)
{
    figma.variables.getLocalVariablesAsync().then(async localVars =>
    {
        let variable = localVars.find(v => v.id == varId);
        if (!variable) return;


        let collection = await figma.variables.getVariableCollectionByIdAsync(variable.variableCollectionId);
        let mode       = collection.modes[0];

        
        // resolve if alias

        let curValue = variable.valuesByMode[mode.modeId];
        
        while (curValue
            && curValue.hasOwnProperty('type')
            && curValue['type'] === 'VARIABLE_ALIAS')
        {
            variable = await figma.variables.getVariableByIdAsync(curValue['id']);
            curValue = variable.valuesByMode[mode.modeId];
            
            collection = await figma.variables.getVariableCollectionByIdAsync(variable.variableCollectionId);
            mode       = collection.modes[0];
        }


        if (value !== null)
        {
            if (variable.resolvedType == 'BOOLEAN')
                value = value != 0;
            else
                variable.setValueForMode(mode.modeId, value);
        }
    });
}



async function figLinkVariableAsync(localVars, nodeId, varId, varType, varName, collection)
{
    let variable = localVars.find(v => v.id == varId);

    if (!variable) 
    {
        if (varId != NULL)
            return null;

        else
        {
            // const collections = await figma.variables.getLocalVariableCollectionsAsync();

            // if (collections.length > 0)
            // {
                variable = figma.variables.createVariable(
                    varName,
                    collection,
                    varType);
            // }
        }
    }


    const [resolvedVar, values] = await figGetResolvedVariableValuesAsync(variable);


    // figPostMessageToUi(
    // {
    //     cmd:         'uiReturnFigLinkNodeToVariable',
    //     nodeId:       nodeId,
    //     variableId:   resolvedVar ? resolvedVar.id           : NULL,
    //     variableName: resolvedVar ? resolvedVar.name         : '',
    //     resolvedType: resolvedVar ? resolvedVar.resolvedType : NULL,
    //     values:       values
    // });


    return resolvedVar;
}



async function figGetResolvedVariableValuesAsync(variable)
{
    const values = [];

    
    if (!variable)
        return values;


    const collection = await figma.variables.getVariableCollectionByIdAsync(variable.variableCollectionId);
            
    for (const mode of collection.modes)
    {
        let value = variable.valuesByMode[mode.modeId];
        
        while (   value
               && value['type'] === 'VARIABLE_ALIAS')
        {
            variable = await figma.variables.getVariableByIdAsync(value.id);
            value    = variable.valuesByMode[mode.modeId];
        }
        
        values.push(value);
    }


    return [variable, values];
}



function figDeleteTempVariableCollection(forceDelete = false)
{
    if (tempVariableCollection)
        tempVariableCollection.remove();
}
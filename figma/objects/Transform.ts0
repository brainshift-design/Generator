function setObjectTransform(figObj, genObj)
{
    const xp0   = point(genObj.xp0.x, genObj.xp0.y);
    const xp1   = point(genObj.xp1.x, genObj.xp1.y);
    const xp2   = point(genObj.xp2.x, genObj.xp2.y);

    const xform = createAffineTransformation(xp0, xp1, xp2);
    //console.log('xform =', xform);

    figObj.relativeTransform = 
    [
        xform[0],
        xform[1]
    ];


    const scaleX = distance(xp0, xp1);// / (1 - xform[0][1]);
    const scaleY = distance(xp0, xp2);// / (1 - xform[1][0]);

    figObj.resizeWithoutConstraints(
                        Math.max(0.01, scaleX),
        genObj.height ? Math.max(0.01, scaleY) : 0);
}



function createAffineTransformation(tl, tr, bl) 
{
    const vr = point(
        tr.x - tl.x, 
        tr.y - tl.y);

    const vb = point(
        bl.x - tl.x, 
        bl.y - tl.y);
  
    const scaleX     =  vr.x;
    const scaleY     =  vb.y;
    const skewY      = -vr.y;
    const skewX      = -vb.x;
    const translateX =  tl.x;
    const translateY =  tl.y;
  
    const matrix = 
        [[scaleX, skewX,  translateX],
         [skewY,  scaleY, translateY],
         [0,      0,      1         ]];
  
    return inversem3(matrix);
}


  
function setPointTransform(figPoint, genPoint)
{
    figPoint.resizeWithoutConstraints(0.01, 0.01);


    figPoint.setPluginData('actualX', genPoint.x.toString());
    figPoint.setPluginData('actualY', genPoint.y.toString());


    figPoint.x = genPoint.x;
    figPoint.y = genPoint.y;

    figPoint.rotation = genPoint.isCenter ? 45 : 0;
}



function updateExistingPointTransform(figPoint)
{
    figPoint.resizeWithoutConstraints(0.01, 0.01);
}
function applyFigmaTransform(figObj, tl, tr, bl) 
{
    const vr = point(tr.x - tl.x, tr.y - tl.y);
    const vb = point(bl.x - tl.x, bl.y - tl.y);


    const sx =  nozero(vr.x);
    const sy =  nozero(vb.y);
    const kx = -vr.y;
    const ky = -vb.x;
    let   dx = -tl.x;
    let   dy = -tl.y;


    let xform = mulm3m3(
        [[1,       ky / sy,  0],
         [kx / sx, 1,        0],
         [0,       0,        1]],
        createTransform(dx, dy));

    xform = inversem3(xform);


    const a = angle(vr);

    if (   a >  Tau/4  
        && a <= Tau*3/4)
        xform = mulm3m3(xform, createTransform(0, 0, 1, 1, Tau/2));


    figObj.relativeTransform = 
    [
        xform[0],
        xform[1]
    ];
}



function setObjectTransform(figObj, genObj)
{
    const xp0   = point(genObj.xp0.x, genObj.xp0.y);
    const xp1   = point(genObj.xp1.x, genObj.xp1.y);
    const xp2   = point(genObj.xp2.x, genObj.xp2.y);

    applyFigmaTransform(figObj, xp0, xp1, xp2);


    const scaleX = distance(xp0, xp1);
    const scaleY = distance(xp0, xp2);

    figObj.resizeWithoutConstraints(
                        Math.max(0.01, scaleX),
        genObj.height ? Math.max(0.01, scaleY) : 0);
}


 
function setPointTransform(figPoint, genPoint)
{
    figPoint.resizeWithoutConstraints(0.01, 0.01);


    figPoint.setPluginData('actualX', genPoint.x.toString());
    figPoint.setPluginData('actualY', genPoint.y.toString());


    figPoint.x        = genPoint.x;
    figPoint.y        = genPoint.y;

    figPoint.rotation = genPoint.isCenter ? 45 : 0;
}



function updateExistingPointTransform(figPoint)
{
    figPoint.resizeWithoutConstraints(0.01, 0.01);
}
function genBooleanIsValid(genBool)
{
    return true;//genBool[FO_BOOLEAN_CHILDREN].length > 0;
}



async function figCreateShapeBoolean(genBool, addProps, transform)
{
    let objects = [];

    for (const obj of genBool[FO_BOOLEAN_CHILDREN])
        await figCreateObject(obj, o => objects = [...objects, o], false);


    await figma.currentPage.loadAsync();

    
    let figBool = null;

    if (!isEmpty(objects))
    {
        switch (genBool[FO_BOOLEAN_OPERATION])
        {
            case 0: figBool = figma.union    (objects, figma.currentPage); break;
            case 1: figBool = figma.subtract (objects, figma.currentPage); break;
            case 2: figBool = figma.intersect(objects, figma.currentPage); break;
            case 3: figBool = figma.exclude  (objects, figma.currentPage); break;
        }
    }


    if (figBool)
    {
        figBool.expanded = false;
        figUpdateBoolean(figBool, genBool, addProps, transform);
    }


    return figBool;
}



async function figUpdateBoolean(figBool, genBool, addProps, transform) //, isValid = false)
{
    if (genBool[FO_BOOLEAN_CHILDREN].length == 0)
    {
        figBool.remove();
        return;
    }

    
    await figUpdateObjects(
        figBool, 
        genBool[FO_BOOLEAN_CHILDREN], 
        genBool[FO_BOOLEAN_CHILDREN].length,
        -1,
        [], 
        false,
        false,
        false,
        false,
        true);


    // if (transform)
    //     setObjectTransform(figBool, genBool, false);

    
    const hasProps =
           genBool[FO_FILLS  ].length > 0
        || genBool[FO_STROKES].length > 0
        || genBool[FO_EFFECTS].length > 0;

    setObjectProps(figBool, genBool, !hasProps && addProps);
}
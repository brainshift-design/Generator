function genFrameIsValid(genFrame)
{
    return genFrame[FO_X          ] != null && !isNaN(genFrame[FO_X          ])
        && genFrame[FO_Y          ] != null && !isNaN(genFrame[FO_Y          ])
        && genFrame[FO_WIDTH      ] != null && !isNaN(genFrame[FO_WIDTH      ])
        && genFrame[FO_HEIGHT     ] != null && !isNaN(genFrame[FO_HEIGHT     ])
        && genFrame[FO_FRAME_ROUND] != null && !isNaN(genFrame[FO_FRAME_ROUND])
        && genFrame[FO_FRAME_CLIP ] != null && !isNaN(genFrame[FO_FRAME_CLIP ]);
}



async function figCreateFrame(genFrame, addProps, transform)
{
    if (!genFrameIsValid(genFrame))
        return null;
        
        
    const figFrame = figma.createFrame();

    
    if (figFrame)
    {
        figFrame.expanded = false;
        figUpdateFrameData(figFrame, genFrame, addProps, transform);


        let objects = [];

        for (const obj of genFrame[FO_FRAME_CHILDREN])
            await figCreateObject(obj, o => objects = [...objects, o]);

        for (const obj of objects)
            figFrame.appendChild(obj);
    }


    return figFrame;
}



function figUpdateFrame(figFrame, genFrame, addProps, transform)
{
    figUpdateFrameData(figFrame, genFrame, addProps, transform);

    figUpdateObjects(
        figFrame, 
        genFrame[FO_FRAME_CHILDREN], 
        genFrame[FO_FRAME_CHILDREN].length);
}



function figUpdateFrameData(figFrame, genFrame, addProps, transform)
{
    figFrame.cornerRadius = genFrame[FO_FRAME_ROUND];
    figFrame.clipsContent = genFrame[FO_FRAME_CLIP ] > 0;



    if (transform)
        setObjectTransform(figFrame, genFrame);
    
    setObjectProps(figFrame, genFrame, addProps && genFrame[FO_FRAME_CHILDREN].length == 0);


    figUpdateStrokeSides(figFrame, genFrame);
}
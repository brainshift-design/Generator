function genEllipseIsValid(genEllipse)
{
    return genEllipse[FO_X            ] != null && !isNaN(genEllipse[FO_X            ])
        && genEllipse[FO_Y            ] != null && !isNaN(genEllipse[FO_Y            ])
        && genEllipse[FO_WIDTH        ] != null && !isNaN(genEllipse[FO_WIDTH        ])
        && genEllipse[FO_HEIGHT       ] != null && !isNaN(genEllipse[FO_HEIGHT       ])
        && genEllipse[FO_ELLIPSE_ROUND] != null && !isNaN(genEllipse[FO_ELLIPSE_ROUND])
        && genEllipse[FO_ELLIPSE_START] != null && !isNaN(genEllipse[FO_ELLIPSE_START])
        && genEllipse[FO_ELLIPSE_SWEEP] != null && !isNaN(genEllipse[FO_ELLIPSE_SWEEP])
        && genEllipse[FO_ELLIPSE_INNER] != null && !isNaN(genEllipse[FO_ELLIPSE_INNER]);
}



function figCreateEllipse(genEllipse, addProps, transform)
{
    if (!genEllipseIsValid(genEllipse))
        return null;
    
    
    const figEllipse = figma.createEllipse();

    figUpdateEllipse(figEllipse, genEllipse, addProps, transform, true);

    
    return figEllipse;
}



function figUpdateEllipse(figEllipse, genEllipse, addProps, transform, isValid = false)
{
    if (   !isValid
        && !genEllipseIsValid(genEllipse))
        return;


    figUpdateEllipseData(figEllipse, genEllipse, transform);


    if (figPoints.includes(figEllipse))
        updatePointObject(figEllipse);
    else 
        setObjectProps(figEllipse, genEllipse, addProps);
}



function figUpdateEllipseData(figEllipse, genEllipse, transform)
{
    figEllipse.cornerRadius = genEllipse[FO_ELLIPSE_ROUND];

    const start = genEllipse[FO_ELLIPSE_START] /360*(Math.PI*2);
    const sweep = genEllipse[FO_ELLIPSE_SWEEP] /100*(Math.PI*2);

    figEllipse.arcData =
    {
        startingAngle: start,
        endingAngle:   start + sweep,
        innerRadius:   Math.min(Math.max(0, genEllipse[FO_ELLIPSE_INNER]/100), 1)
    };

    if (transform)
        setObjectTransform(figEllipse, genEllipse);
}
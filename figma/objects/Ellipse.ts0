function genEllipseIsValid(genEllipse)
{
    return genEllipse.x      != null && !isNaN(genEllipse.x     )
        && genEllipse.y      != null && !isNaN(genEllipse.y     )
        && genEllipse.width  != null && !isNaN(genEllipse.width )
        && genEllipse.height != null && !isNaN(genEllipse.height)
        //&& genEllipse.angle  != null && !isNaN(genEllipse.angle )
        && genEllipse.from   != null && !isNaN(genEllipse.from  )
        && genEllipse.to     != null && !isNaN(genEllipse.to    )
        && genEllipse.inner  != null && !isNaN(genEllipse.inner );
}



function figCreateEllipse(genEllipse)
{
    const figEllipse = figma.createEllipse();


    figEllipse.name = makeObjectName(genEllipse);

    if (!genEllipseIsValid(genEllipse))
        return figEllipse;


    figEllipse.arcData =
    {
        startingAngle: genEllipse.from /360*(Math.PI*2),
        endingAngle:   genEllipse.to   /360*(Math.PI*2),
        innerRadius:   genEllipse.inner/100
    };


    setObjectTransform(figEllipse, genEllipse);

    
    if (figPoints.includes(figEllipse))
        updatePointSize(figEllipse);
        
    else
        setObjectProps(figEllipse, genEllipse);

    
    return figEllipse;
}



function figUpdateEllipse(figEllipse, genEllipse)
{
    if (!genEllipseIsValid(genEllipse))
        return;


    figEllipse.name = makeObjectName(genEllipse);


    figEllipse.arcData =
    {
        startingAngle: genEllipse.from /360*(Math.PI*2),
        endingAngle:   genEllipse.to   /360*(Math.PI*2),
        innerRadius:   genEllipse.inner/100
    };


    setObjectTransform(figEllipse, genEllipse);
    setObjectProps    (figEllipse, genEllipse);
}

function genTextIsValid(genText)
{
    return genText.text   != null
        && genText.x      != null && !isNaN(genText.x     )
        && genText.y      != null && !isNaN(genText.y     )
        && genText.width  != null && !isNaN(genText.width )
        && genText.height != null && !isNaN(genText.height)
        //&& genText.angle  != null && !isNaN(genText.angle )
        && genText.font   != null && genText.font != NULL
        && genText.size   != null && !isNaN(genText.size  );
}



function figCreateText(genText)
{
    const figText = figma.createText();
    
    figText.name = makeObjectName(genText);

    if (!genTextIsValid(genText))
        return figText;


    (async function() 
    {
        const fontName = 
        { 
            family: genText.font, 
            style:  genText.style
        };


        await figma.loadFontAsync(fontName); 

        figText.fontName      = fontName;
        figText.fontSize      = Math.max(1, genText.size);
        
        figText.characters    = genText.text;

        figText.lineHeight    = {unit: 'PERCENT', value: genText.lineHeight   };
        figText.letterSpacing = {unit: 'PERCENT', value: genText.letterSpacing};


             if (genText.alignH == 0) figText.textAlignHorizontal = 'LEFT';
        else if (genText.alignH == 1) figText.textAlignHorizontal = 'CENTER';
        else if (genText.alignH == 2) figText.textAlignHorizontal = 'RIGHT';
        else if (genText.alignH == 3) figText.textAlignHorizontal = 'JUSTIFIED';

             if (genText.alignV == 0) figText.textAlignVertical   = 'TOP';
        else if (genText.alignV == 1) figText.textAlignVertical   = 'CENTER';
        else if (genText.alignV == 2) figText.textAlignVertical   = 'BOTTOM';


        setObjectTransform(figText, genText);
        setObjectProps    (figText, genText);


        if (     genText.width  == 0
              && genText.height == 0) figText.textAutoResize = 'WIDTH_AND_HEIGHT';
        else if (genText.width  == 0) figText.textAutoResize = 'HEIGHT';
        else                          figText.textAutoResize = 'NONE';

    })();

    return figText;
}



function figUpdateText(figText, genText)
{
    figText.name = makeObjectName(genText);

    if (!genTextIsValid(genText))
        return;


    (async function() 
    { 
        const fontName = 
        { 
            family: genText.font, 
            style:  genText.style
        };


        await figma.loadFontAsync(fontName); 

        figText.fontName      = fontName;
        figText.fontSize      = Math.max(1, genText.size);

        figText.characters    = genText.text;

        figText.lineHeight    = {unit: 'PERCENT', value: genText.lineHeight   };
        figText.letterSpacing = {unit: 'PERCENT', value: genText.letterSpacing};


             if (genText.alignH == 0) figText.textAlignHorizontal = 'LEFT';
        else if (genText.alignH == 1) figText.textAlignHorizontal = 'CENTER';
        else if (genText.alignH == 2) figText.textAlignHorizontal = 'RIGHT';
        else if (genText.alignH == 3) figText.textAlignHorizontal = 'JUSTIFIED';

             if (genText.alignV == 0) figText.textAlignVertical   = 'TOP';
        else if (genText.alignV == 1) figText.textAlignVertical   = 'CENTER';
        else if (genText.alignV == 2) figText.textAlignVertical   = 'BOTTOM';


        setObjectTransform(figText, genText);
        setObjectProps    (figText, genText);


        if (     genText.width  == 0
              && genText.height == 0) figText.textAutoResize = 'WIDTH_AND_HEIGHT';
        else if (genText.width  == 0) figText.textAutoResize = 'HEIGHT';
        else                          figText.textAutoResize = 'NONE';

    })();
}



function setTextStyle(figText, genText)
{
    //switch (genText.style)
    //{

    //}
}




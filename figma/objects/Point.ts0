var figPoints = [];



function genPointIsValid(genPoint)
{
    return genPoint.x != null && !isNaN(genPoint.x)
        && genPoint.y != null && !isNaN(genPoint.y);
}



function figCreatePoint(genPoint)
{    
    const figPoint = 
        genPoint.isCenter
        ? figma.createRectangle()
        : figma.createEllipse();

    figPoint.name = makeObjectName(genPoint);

    figPoint.setPluginData('isCenter', boolToString(genPoint.isCenter));


    if (!genPointIsValid(genPoint))
        return figPoint;


    //figPoint.rotation = 0;

    
    if (figPoints.includes(figPoint))
        updatePointSize_(figPoint, genPoint);

    else
    {
        setPointTransform(figPoint, genPoint);
        updatePointStyles(figPoint);
    }

    
    return figPoint;
}



function figUpdatePoint(figPoint, genPoint)
{
    if (!genPointIsValid(genPoint))
        return;


    figPoint.name = makeObjectName(genPoint);


    setPointTransform(figPoint, genPoint);
    updatePointStyles(figPoint);
}



function updatePointSizes()
{
    if (figma.viewport.zoom != curZoom)
    {
        figPostMessageToUi(
        {
            cmd: 'uiUpdateZoom', 
            zoom: figma.viewport.zoom 
        });
        
        
        curZoom = figma.viewport.zoom;

        for (const point of figPoints)
            updatePointSize(point);
    }
}



function updatePointSize(figPoint)
{
    updateExistingPointTransform(figPoint);
    updatePointStyles(figPoint);
}



function updatePointSize_(figPoint, genPoint)
{
    setPointTransform(figPoint, genPoint);
    updatePointStyles(figPoint);
}



function updatePointStyles(figPoint)
{
    const isCenter = parseBool(figPoint.getPluginData('isCenter'));

    const color =
        isCenter
        ? [0xf2, 0x48, 0x22]
        : [0xff, 0xff, 0xff];

    const border =
        isCenter
        ? [255, 255, 255]
        : [ 12, 140, 233];


    figPoint.fills = getObjectFills([['SOLID', color[0], color[1], color[2], 100]]);


    const effects = [];
    
    effects.push(...getObjectEffects(
        [['DROP_SHADOW', border[0]/255, border[1]/255, border[2]/255,  1, 0, 0, 0, (isCenter ? 3 : 3.6)/curZoom, 'NORMAL', true, true]]));
    
    effects.push(...getObjectEffects(
        [['DROP_SHADOW', color[0]/255, color[1]/255, color[2]/255, 1, 0, 0, 0, 2.4/curZoom, 'NORMAL', true, true]]));


    figPoint.effects = effects;
}

// from UI <--
///////////////////////////////////////////////////////////////////////////////////////////////////

figma.ui.onmessage = function(msg)
{
    msg = JSON.parse(msg);
    
    switch (msg.cmd)
    {
        case 'figStartGenerator':                     figStartGenerator                    ();                                            break;
        case 'figRestartGenerator':                   figRestartGenerator                  ();                                            break;
     
        case 'figDockWindowNormal':                   figDockWindow                        ('normal');                                    break;
        case 'figDockWindowMaximize':                 figDockWindow                        ('maximize');                                  break;
        case 'figDockWindowTop':                      figDockWindow                        ('top');                                       break;
        case 'figDockWindowLeft':                     figDockWindow                        ('left');                                      break;
        case 'figDockWindowRight':                    figDockWindow                        ('right');                                     break;
        case 'figDockWindowBottom':                   figDockWindow                        ('bottom');                                    break;        

        case 'figGetMousePosition':                   figGetMousePosition                  (msg.clientPosition);                          break;

        //case 'figPositionWindow':                   figPositionWindow                    (msg.x, msg.y);                                break; 
        case 'figResizeWindow':                       figResizeWindow                      (msg.width, msg.height);                       break; 

        case 'figSetWindowRect':                      figSetWindowRect                     (msg.x, msg.y, msg.width, msg.height);         break;

        case 'figNotify':                             figNotifyMsg                         (msg);                                         break;
     
        case 'figGetLocalData':                       figGetLocalData                      (msg.key);                                     break;
        case 'figSetLocalData':                       figSetLocalData                      (msg.key, msg.value);                          break;
     
        case 'figClearAllLocalData':                  figClearAllLocalData                 ();                                            break;
     
        case 'figGetPageData':                        figGetPageData                       (msg.key);                                     break;
        case 'figSetPageData':                        figSetPageData                       (msg.key, msg.value);                          break;
        
        case 'figSavePages':                          figSavePages                         (msg.pageIds, msg.pageJson, msg.currentPageId); break;
     
        case 'figLoadNodesAndConns':                  figLoadNodesAndConns                 (msg.dataMode);                                break;
        case 'figSaveNodes':                          figSaveNodes                         (msg.nodeIds, msg.nodeJson);                   break;
     
        case 'figGetAllLocalTemplateNames':           figGetAllLocalTemplateNames          ();                                            break;
        case 'figSaveLocalTemplate':                  figSaveLocalTemplate                 (msg.templateName, msg.template);              break;

        case 'figRemoveConnsToNodes':                 figRemoveConnsToNodes                (msg.nodeIds);                                 break;
        case 'figRemoveSavedNodesAndConns':           figRemoveSavedNodesAndConns          (msg.nodeIds);                                 break;
        case 'figRemoveAllSavedNodesAndConns':        figRemoveAllSavedNodesAndConns       ();                                            break;
     

        case 'figLogAllSavedNodesAndConns':           figLogAllSavedNodesAndConns          (msg.darkMode);                                break;
        case 'figLogAllSavedNodes':                   figLogAllSavedNodes                  (msg.darkMode);                                break;
        case 'figLogAllSavedConns':                   figLogAllSavedConns                  (msg.darkMode);                                break;
     
        case 'figLogAllSavedPageKeys':                figLogAllSavedPageKeys               (msg.darkMode);                                break;
        case 'figLogAllSavedPages':                   figLogAllSavedPages                  (msg.darkMode);                                break;
        case 'figLogAllSavedConnKeys':                figLogAllSavedConnKeys               (msg.darkMode);                                break;

        case 'figLogAllLocalData':                    figLogAllLocalData                   (msg.darkMode);                                break;
     

        case 'figRemoveSavedPage':                    figRemoveSavedPage                   (msg.pageId);                                  break;
        case 'figRemoveAllSavedPages':                figRemoveAllSavedPages               ();                                            break;


        case 'figSaveConnection':                     figSaveConnection                    (msg.key, msg.json);                           break;
        case 'figSaveConnections':                    figSaveConnections                   (msg.keys, msg.json);                          break;
        case 'figUpdateSavedConnections':             figUpdateSavedConnections            (msg.curKeys, msg.newKeys, msg.json);          break;
        case 'figDeleteSavedConnection':              figDeleteSavedConnection             (msg.key);                                     break;
     
        case 'figRemoveAllSavedConnections':          figRemoveAllSavedConnections         ();                                            break;
        case 'figDeleteSavedConnectionsToNode':       figDeleteSavedConnectionsToNode      (msg.nodeId);                                  break;
        case 'figDeleteSavedConnectionsFromNode':     figDeleteSavedConnectionsFromNode    (msg.nodeId);                                  break;
        case 'figRemovePluginDataFromAllLocalStyles': figRemovePluginDataFromAllLocalStyles();                                            break;

        case 'figGetAllLocalColorStyles':             figGetAllLocalColorStyles            (msg.nodeId, msg.px, msg.py);                  break;
        case 'figLinkNodeToExistingColorStyle':       figLinkNodeToExistingColorStyle      (msg.nodeId, msg.styleId);                     break;
     
     // case 'figUpdateViewportRect':                 figPostMessageToUi({cmd: 'uiReturnUpdateViewportRect', viewportRect: figma.viewport.bounds }); break;
     
        case 'figGetObjectSize':                      figGetObjectSize                     (msg.object);                                  break;

        case 'figUpdateShowIds':                      
            showIds = msg.showIds; 
            break;
     
        case 'figUpdateObjectsAndStyles':
            figUpdateObjects(null, msg.objects, msg.nodeIds, msg.lastChunk);
            figUpdateStyles(msg);
            break;
     
        case 'figDeleteObjectsAndStyles':
            figDeleteObjectsFromNodeIds(msg.nodeIds);
            figDeleteStylesFromNodeIds(msg.nodeIds, msg.mustDelete);
            break; 
    
        case 'figDeleteObjectsExcept':             
            figDeleteObjectsExcept(msg.nodeIds, msg.ignoreObjects);
            break; 
    
        case 'figTriggerUndo': figma.triggerUndo(); break;
        case 'figCommitUndo':  figma.commitUndo();  break;

        // case 'figValidateLicense':
        //     figValidateLicense(msg.license);
        //     break;
    }


    figPostMessageToUi({
        cmd:    'uiEndFigMessage',
        msgCmd:  msg.cmd });
}

///////////////////////////////////////////////////////////////////////////////////////////////////



// to UI -->
///////////////////////////////////////////////////////////////////////////////////////////////////

function figPostMessageToUi(msg)
{
    figma.ui.postMessage(JSON.stringify(msg));
}

///////////////////////////////////////////////////////////////////////////////////////////////////
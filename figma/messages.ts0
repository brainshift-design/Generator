// from UI <--
///////////////////////////////////////////////////////////////////////////////////////////////////

figma.ui.onmessage = msg => 
{
    switch (msg.cmd)
    {
        case 'figStartGenerator':               figStartGenerator              ();                                           break;
           
        case 'figResizeWindow':                 figResizeWindow                (msg.width, msg.height);                      break; 
        case 'figNotify':                       figNotify                      (msg.text, msg.prefix, msg.delay, msg.error); break;
                           
        case 'figGetLocalData':                 figGetLocalData                (msg.key);                                    break;
        case 'figSetLocalData':                 figSetLocalData                (msg.key, msg.value);                         break;
                   
        case 'figGetPageData':                  figGetPageData                 (msg.key);                                    break;
        case 'figSetPageData':                  figSetPageData                 (msg.key, msg.value);                         break;
                
        case 'figLoadNodesAndConns':            figLoadNodesAndConns           ();                                           break;
        case 'figSaveNodes':                    figSaveNodes                   (msg.nodeIds, msg.nodeJson);                  break;        
        
        case 'figRemoveConnsToNodes':           figRemoveConnsToNodes          (msg.nodeIds);                                break;
        case 'figRemoveSavedNodesAndConns':     figRemoveSavedNodesAndConns    (msg.nodeIds);                                break;
        case 'figRemoveAllSavedNodesAndConns':  figRemoveAllSavedNodesAndConns ();                                           break;
        
        case 'figLogAllSavedNodesAndConns':     figLogAllSavedNodesAndConns    (msg.settings);                               break;
        case 'figLogAllSavedNodes':             figLogAllSavedNodes            (msg.settings);                               break;
        case 'figLogAllSavedConns':             figLogAllSavedConns            (msg.settings);                               break;
     
        case 'figSaveConnection':               figSaveConnection              (msg.name, msg.json);                         break;
        case 'figRemoveSavedConnection':        figRemoveSavedConnection       (msg.name);                                   break;
        case 'figRemoveSavedConnectionsToNode': figRemoveSavedConnectionsToNode(msg.nodeId);                                 break;
           
        case 'figUpdateObjects':                
            figUpdateObjects(/*msg.updateId,*/ msg.objects); 
            figEndGeneratorMessage(); 
            return;

        case 'figDeleteObjects':                
            figDeleteObjectsFromNodeIds(msg.nodeIds);                          
            figEndGeneratorMessage(); 
            return; 
    }

    
    figPostMessageToUi({cmd: 'uiEndFigMessage'});
}

///////////////////////////////////////////////////////////////////////////////////////////////////



// to UI -->
///////////////////////////////////////////////////////////////////////////////////////////////////

function figPostMessageToUi(msg)
{
    figma.ui.postMessage(msg);
}

///////////////////////////////////////////////////////////////////////////////////////////////////



// to Generator -->
///////////////////////////////////////////////////////////////////////////////////////////////////

function figPostMessageToGenerator(msg)
{
    figPostMessageToUi({
        cmd: 'uiForwardToGen',
        msg:  msg
    });
}



function figEndGeneratorMessage()
{
    figPostMessageToGenerator({cmd: 'genEndFigMessage'}); 
}

///////////////////////////////////////////////////////////////////////////////////////////////////
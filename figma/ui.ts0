var notifyNotificationHandler = null;
var notifyDequeueHandler = () => notifyNotificationHandler = null;

var windowDock = ''; // '', 'maximize', 'top', 'left', 'right', 'bottom'

function figRepositionWindow(x, y)
{
    x = Math.floor(Math.max(0, x ));
    y = Math.floor(Math.max(0, y));

    figma.ui.reposition(x, y);

    figma.clientStorage.setAsync('windowX', x);
    figma.clientStorage.setAsync('windowY', y);

    figPostMessageToUI({cmd: 'uiReturnFigRepositionWindow'});
}



function figResizeWindow(width, height)
{
    width  = Math.floor(Math.max(0, width ));
    height = Math.floor(Math.max(0, height));

    figma.ui.resize(width, height);

    figma.clientStorage.setAsync('windowWidth',  width);
    figma.clientStorage.setAsync('windowHeight', height);

    figPostMessageToUi({cmd: 'uiReturnFigResizeWindow'});
}



function figNotifyMsg(msg)
{
    figNotify(
        msg.text, 
        msg.prefix, 
        msg.delay, 
        msg.error, 
        msg.buttonText,
        msg.buttonAction);
}



function figNotify(text, prefix = 'Generator ', delay = 400, error = false, buttonText = '', buttonAction = NULL)
{
    const options = {
        timeout:   delay,
        error:     error,
        onDequeue: notifyDequeueHandler
    };


    if (buttonText != '')
    {
        options['button'] = {text: buttonText};

        switch (buttonAction)
        {
            case 'hideClearUndoWarning':
                options['button']['action'] = () => figPostMessageToUi({ cmd: 'uiHideClearUndoWarning' });
                break;
        }
    }


    if (notifyNotificationHandler)
        notifyNotificationHandler.cancel();


    notifyNotificationHandler = figma.notify(prefix + text, options);
}
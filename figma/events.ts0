var styleChangingFromGenerator = false;



//function figOnSelectionChange(e)
//{
    /*  Every time a selection changes, check that all objects in the object table
        still exist in the canvas. If not, remove the pointer from the object table.  
        
        NOTE: at this point I don't know if objects are deleted by the API, but then again,
        only one plugin runs at a time right now, so maybe it's not an issue.  */


    // figma.currentPage.loadAsync().then(() =>
    // {
        // for (let i = 0; i < objNodes.length; i++)
        // {
        //     if (!objNodes[i]) continue;
            
        //     for (let j = 0; j < objNodes[i].length; j++)
        //     {
        //         if (!objNodes[i][j]) continue;

        //         const exists = figma.currentPage.children.findIndex(obj => parseInt(obj.getPluginData('objectId')) == i);
        //         if (!exists) objNodes[i][j] = null;
        //     }
        // }
    // });
//}



function figOnDocumentChange(e)
{
    for (const change of e.documentChanges)
    {
        switch (change.type)
        {
            case 'STYLE_CREATE': 
                // this is for undoing style deletion in Figma,
                // when the style comes back it shouldn't be like before

                if (!change.style)
                    break;

                if (!styleChangingFromGenerator)
                {
                    change.style.setPluginData('type',     NULL);
                    change.style.setPluginData('nodeId',   NULL);
                    change.style.setPluginData('existing', NULL);
                }

                break;


            case 'STYLE_PROPERTY_CHANGE': 
            {
                if (!change.style)
                    break;

                if (!styleChangingFromGenerator)
                {
                    const msg = {
                        cmd:       'uiStylePropertyChange',
                        styleId:    cleanStyleId(change.id),
                        properties: change.properties,
                        name:       '',
                        paints:     [] };
    

                    for (const prop of change.properties)
                    {
                        switch (prop)
                        {
                            case 'name':  msg.name   = change.style.name;   break;
                            case 'paint': msg.paints = change.style.paints; break;
                        }
                    }


                    figPostMessageToUi(msg);
                }
                
                break;
            }

            
            case 'STYLE_DELETE':
                figPostMessageToUi({
                    cmd:    'uiStyleDelete',
                    styleId: change.id });

                break;
        }
    }

    styleChangingFromGenerator = false;
}



function figOnPluginClose()
{
    figDeleteAllObjects();
    figPostMessageToUi({ cmd: 'updateMetrics' });
}
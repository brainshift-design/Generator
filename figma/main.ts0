const OBJ_RECT = 1;

const MAX_OBJECTS = 0x10000;
const MAX_NODES   = 0x10000;

const objNodes = new Array(MAX_NODES).fill(null);

var minNodeId = Number.MAX_SAFE_INTEGER;
var maxNodeId = Number.MIN_SAFE_INTEGER;


// const objects  = new Array(MAX_OBJECTS);
// var   maxObjId = -1;


figma.showUI(__html__);


figma.ui.onmessage = msg => 
{
    switch (msg.cmd)
    {
        case 'saveLocal':         saveLocal    (msg.key, msg.value);       break;
        case 'setPluginData':     setPluginData(msg.key, msg.value);       break;
        case 'loadState':         loadState(msg);                          break;
        case 'resizeWindow':      resizeWindow(msg);                       break; 
        case 'deleteNodeObjects': deleteNodeObjects(msg.nodeIds);          break; 
        case 'updateObjects':     updateObjects(msg);                      break;
        case 'notify':            notify(msg.text, msg.prefix, msg.delay); break;
    }
};



figma.on('selectionchange', onSelectionChange);
figma.on('close',           onPluginClose);



function loadState(msg)
{
    (async function()
    {
        // load state
        var state = await figma.clientStorage.getAsync('state');
        if (state == null) state = {};
        // ...


        // resize window
        const wndWidth  = await figma.clientStorage.getAsync('windowWidth');
        const wndHeight = await figma.clientStorage.getAsync('windowHeight');

        if (wndWidth  == null) wndWidth  = 400;
        if (wndHeight == null) wndHeight = 300;

        figma.ui.resize(
            Math.max(0, wndWidth),
            Math.max(0, wndHeight));

        // load product key
        let productKey = await loadLocal('productKey');
        if (productKey == null) productKey = '';


        // end load state
        figma.ui.postMessage({
            cmd:        'endLoadState',
            currentUser: figma.currentUser,
            productKey:  productKey });
    })();
}



function saveLocal(key, value)
{
    figma.clientStorage.setAsync(key, value); 
}



async function loadLocal(key)
{
    return await figma.clientStorage.getAsync(key); 
}



function setPluginData(key, value)
{
    figma.currentPage.setPluginData(key, value);
}



function objTypeString(type)
{
    switch (type)
    {
        case OBJ_RECT: return 'RECTANGLE';
        // case 'VECTOR':
        // case 'LINE':
        // case 'ELLIPSE':
        // case 'POLYGON':
        // case 'STAR':
        // case 'TEXT':
        // case 'BOOLEAN_OPERATION':
    }

    return 'ERROR_TYPE';
}



function postToGenerator(msg)
{
    figma.ui.postMessage({
        cmd: 'forwardToGen',
        msg:  msg
    });
}

//figma.on('selectionchange', figOnSelectionChange);

figma.on('documentchange', figOnDocumentChange);
figma.on('close',          figOnPluginClose);



figDeleteAllObjects(true);



figma.showUI(
    __html__,
    {
        visible:     false,
        themeColors: true
    });
    


var curZoom = figma.viewport.zoom;

setInterval(() => 
{
    if (figma.viewport.zoom == curZoom)
        return;

    updatePointSizes();
    updateEmptyObjects();
    
    curZoom = figma.viewport.zoom;
}, 
100);


var showIds = false;


// figma.currentPage
//     .getPluginDataKeys()
//     .forEach(k => figma.currentPage.setPluginData(k, figma.currentPage.getPluginData(k).replace('\\', '\\\\')));



function figStartGenerator()
{
    (async function()
    {
        let subscription = await figLoadLocal('subscription');
        if (subscription == null) subscription = '';

        
        let _wndWidth  = await figma.currentPage.getPluginData(figma.currentUser.id+',windowWidth');
        let _wndHeight = await figma.currentPage.getPluginData(figma.currentUser.id+',windowHeight');

        let wndWidth;
        let wndHeight;

        if (_wndWidth  === NULL) { wndWidth  = 800; figma.currentPage.setPluginData(figma.currentUser.id+',windowWidth',  _wndWidth .toString()); } else wndWidth  = parseInt(_wndWidth );
        if (_wndHeight === NULL) { wndHeight = 600; figma.currentPage.setPluginData(figma.currentUser.id+',windowHeight', _wndHeight.toString()); } else wndHeight = parseInt(_wndHeight);

        
        figma.ui.resize(
            Math.max(0, wndWidth),
            Math.max(0, wndHeight));

        figma.ui.show();

        
        const fonts = await figma.listAvailableFontsAsync();
        // console.log('figma fonts =', fonts);
 

        figPostMessageToUi({
            cmd:         'uiReturnFigStartGenerator',
            currentUser:  figma.currentUser,
            subscription: subscription,
            viewportRect: figma.viewport.bounds,
            viewportZoom: figma.viewport.zoom,
            fonts:        fonts });
    })();
}



function figRestartGenerator()
{
    figDeleteAllObjects();

    figma.showUI(
        __html__,
        {
            visible:     false,
            themeColors: true
        });
}
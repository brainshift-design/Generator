console.clear();


figma.payments.setPaymentStatusInDevelopment({type: 'PAID'});


figma.loadAllPagesAsync().then(() =>
{
    //figma.on('selectionchange', figOnSelectionChange);

    figma.on('documentchange',  figOnDocumentChange);
    figma.on('selectionchange', figOnSelectionChange);
    figma.on('close',           figOnPluginClose);
});


figDeleteAllObjects(true);


figma.clientStorage.getAsync('pro').then(data =>
{
    figma.showUI(
        __html__,
        {
            visible:     false,
            themeColors: true,
            title:       'Generator' + (data !== true ? ' (Free version)' : '')
        });
});


var curZoom = figma.viewport.zoom;
setInterval(figOnZoomInterval, 100);


var strBackgrounds = '';
setInterval(figCheckBackgrounds, 500);


const clockMarker   = 'clock_';
const clockInterval = 1000;


var showIds          = false;
var objectCenterSize = 15;


// figma.currentPage
//     .getPluginDataKeys()
//     .forEach(k => figma.currentPage.setPluginData(k, figma.currentPage.getPluginData(k).replace('\\', '\\\\')));



function figStartGenerator()
{
    (async function()
    {
        figma.currentPage.loadAsync().then(async () =>
        {
            let _wndWidth  = await figma.currentPage.getPluginData(figma.currentUser.id+',windowWidth');
            let _wndHeight = await figma.currentPage.getPluginData(figma.currentUser.id+',windowHeight');

            let wndWidth;
            let wndHeight;

            if (_wndWidth  === NULL) { wndWidth  = 800; figma.currentPage.setPluginData(figma.currentUser.id+',windowWidth',  _wndWidth .toString()); } else wndWidth  = parseInt(_wndWidth );
            if (_wndHeight === NULL) { wndHeight = 600; figma.currentPage.setPluginData(figma.currentUser.id+',windowHeight', _wndHeight.toString()); } else wndHeight = parseInt(_wndHeight);

            
            figma.ui.resize(
                Math.max(minWindowWidth,  wndWidth ),
                Math.max(minWindowHeight, wndHeight));

            figma.ui.show();

            
            const fonts = await figma.listAvailableFontsAsync();
    
            const eula      = (await figma.clientStorage.getAsync('eula'     )) === 'true';
            const tutorials = (await figma.clientStorage.getAsync('tutorials')) === 'true';
            const isLocked  = await figPageIsLocked();

        
            figPostMessageToUi(
            {
                cmd:          'uiReturnFigStartGenerator',
                currentUser:   figma.currentUser,
                viewportRect:  figma.viewport.bounds,
                viewportZoom:  figma.viewport.zoom,
                fonts:         fonts,
                eula:          eula,
                tutorials:     tutorials,
                isLocked:      isLocked,
                windowWidth:   wndWidth,
                windowHeight:  wndHeight
            });
        });
    })();
}



function figRestartGenerator()
{
    figDeleteAllObjects();

    figma.showUI(
        __html__,
        {
            visible:     false,
            themeColors: true
        });
}



function figFinishStart()
{
    setInterval(figOnIdInterval, clockInterval);
}



function figOnZoomInterval()
{
    if (figma.viewport.zoom == curZoom)
        return;

    curZoom = figma.viewport.zoom;

    updatePointObjects();
    updateEmptyObjects();
    updateDecoObjects();
}



function figCheckBackgrounds()
{
    if (strBackgrounds != JSON.stringify(figma.currentPage.backgrounds))
    {
        updateEmptyObjects();
        strBackgrounds = JSON.stringify(figma.currentPage.backgrounds);
    }
}



function figOnIdInterval()
{
    figSetPageData(clockMarker + figma.currentUser.sessionId.toString(), Date.now().toString())
}



async function figPageIsLocked()
{
    await figma.currentPage.loadAsync();


    const clocks = figma.currentPage.getPluginDataKeys()
        .filter(k => 
               k.length > clockMarker.length
            && k.substring(0, clockMarker.length) == clockMarker
            && k.substring(   clockMarker.length) != figma.currentUser.sessionId.toString())
        .map(async k => parseInt(await figGetPageData(k)));


    clocks.sort();

    const now = Date.now();

    const locked = clocks.length > 0
        && now - (await clocks[clocks.length-1]) < clockInterval*2;


    return locked;
}



function figOnSelectionChange()
{
    updatePointObjects();
}
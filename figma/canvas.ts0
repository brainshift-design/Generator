var figObjectArrays = new Array(); // [ {nodeId, [objects]} ]
var figStyleArrays  = new Array(); // [ {nodeId, [styles]}  ]



function figDeleteObjectsFromNodeIds(nodeIds)
{
    figObjectArrays = figObjectArrays.filter(a => !nodeIds.includes(a.nodeId));
}



function figDeleteObjectsExcept(nodeIds, ignoreObjects)
{
    for (let i = figObjectArrays.length-1; i >= 0; i--)
    {
        const objArray = figObjectArrays[i];

        if (!nodeIds.includes(objArray.nodeId))
            continue;


        for (let j = objArray.objects.length-1; j >= 0; j--)
        {
            const obj = objArray.objects[j];
            
            
            if (!ignoreObjects.find(o => obj.name == makeObjectName(o)))
            {
                obj.remove();
                removeFromArray(objArray.objects, obj);
            }
        }
        

        if (isEmpty(objArray.objects))
            removeFromArray(figObjectArrays, objArray);
    }
}



function figDeleteAllObjects()
{
    for (const obj of figma.currentPage.children)
        if (!!obj.getPluginData('id')) 
            obj.remove();
}



function figDeleteStylesFromNodeIds(nodeIds, mustDelete)
{
    // styles are deleted first
    
    const paintStyles = figma.getLocalPaintStyles();

    figma.currentPage
        .findAll(o => nodeIds.includes(o.getPluginData('nodeId')))
        .forEach(o => o.remove());

    paintStyles
        .filter(s => 
                nodeIds.includes(s.getPluginData('nodeId')))
//            && !parseBool(s.getPluginData('existing')))
        .forEach(s => 
        {
            const nodeId   = s.getPluginData('nodeId');
            const existing = parseBool(s.getPluginData('existing'));
            
            if (!existing) 
            {
                s.remove();
            }
            else if (mustDelete)
            {
                removeFromArrayWhere(figStyleArrays, a => a.nodeId == nodeId);

                s.setPluginData('type',     NULL);
                s.setPluginData('nodeId',   NULL);
                s.setPluginData('existing', NULL);
            }
        });


    if (mustDelete)
        figStyleArrays = figStyleArrays.filter(a => !nodeIds.includes(a.nodeId));
}
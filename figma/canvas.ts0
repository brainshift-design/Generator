function deleteNodeObjects(nodeIds)
{
    for (const nodeId of nodeIds)
    {
        if (!objNodes[nodeId]) continue;
        
        for (const obj of objNodes[nodeId])
            obj.remove();

        objNodes[nodeId] = null;
    }
}



function deleteAllObjects()
{
    for (const obj of figma.currentPage.children)
        if (!!obj.getPluginData('id')) obj.remove();
}



function updateObjects(msg)
{
    // prepare the buffers

    var nodeId = -1;
    var prevId = -1;
    var count  = 0;

    for (const obj of msg.objects)
    {
        count++;

        if (obj[2] != nodeId)
        {
            nodeId = obj[2];

            if (prevId > -1)
            {
                if (  !objNodes[prevId]
                    || objNodes[prevId].length != count)
                {
                    deleteNodeObjects([prevId]);
                    objNodes[prevId] = new Array(count).fill(null);
                }

                count = 0;
            }

            prevId = nodeId;
        }
    }

    if (   count > 0
        && (  !objNodes[nodeId]
            || objNodes[nodeId].length != count))
    {
        deleteNodeObjects([nodeId]);
        objNodes[nodeId] = new Array(count).fill(null);
    }


    // fill the buffers

    for (const obj of msg.objects)
    {
        switch (obj[0])
        {
            case OBJ_RECT:
            {
                if (!objNodes[obj[2]][obj[1]])
                {
                    createRect(obj);
                }
                else 
                {
                    const cur = objNodes[obj[2]][obj[1]];

                    if (   cur.type == objTypeString(obj[0])
                        && cur.getPluginData('id')     == obj[1]
                        && cur.getPluginData('nodeId') == obj[2])
                        updateRect(obj);

                    else
                        notify('Error: Object ID mismatch');
                }

                break;
            }
        }
    }
}



function createRect(obj)
{
    const rect = figma.createRectangle();

    rect.name = obj[2].toString() + ':' + obj[1].toString();

    rect.setPluginData('id',     obj[1].toString());
    rect.setPluginData('nodeId', obj[2].toString());
    rect.setPluginData('name',   rect.name);
    
    rect.x = obj[3]
    rect.y = obj[4];
    
    rect.fills = [{type: 'SOLID', color: {r: 0, g: 0, b: 0}}];

    rect.resize(
        Math.max(0.01, obj[5]), 
        Math.max(0.01, obj[6]));

    rect.cornerRadius = obj[7];

    objNodes[obj[2]][obj[1]] = rect;
    figma.currentPage.appendChild(rect);
}



function updateRect(obj)
{
    const rect = objNodes[obj[2]][obj[1]];

    rect.x = obj[3];
    rect.y = obj[4];

    if (   rect.width  != obj[5]
        || rect.height != obj[6])
    {
        rect.resize(
            Math.max(0.01, obj[5]), 
            Math.max(0.01, obj[6]));
    }

    rect.cornerRadius = obj[7];
}



// function updateRect(data)
// {
//     const existing = figma.currentPage.children.findIndex(obj => 
//         obj.getPluginData('#GEN') === '#GEN_' + data.itemId);

//     var rect;

//     if (existing < 0)
//     {
//         rect = figma.createRectangle()
//         rect.name  = data.itemId;
//         rect.setPluginData('#GEN', '#GEN_' + rect.name);
//         rect.fills = [{type: 'SOLID', color: {r: 0, g: 0, b: 0}}];
//         rect.x     = data.x;
//         rect.y     = data.y;
    
//         figma.currentPage.appendChild(rect);
//     }    
//     else
//     {
//         rect = <RectangleNode>figma.currentPage.children[existing];

//         rect.x = data.x;
//         rect.y = data.y;
//     }    

//     if (   rect.width  != data.width
//         || rect.height != data.height)

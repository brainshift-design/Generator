var figObjectArrays = new Array(); // [ {nodeId, [objects]} ]
var figStyleArrays  = new Array(); // [ {nodeId, [styles]}  ]



function figDeleteObjectsFromNodeIds(nodeIds)
{
    for (let i = figPoints.length-1; i >= 0; i--)
        if (nodeIds.includes(figPoints[i].getPluginData('nodeId')))
            figPoints.splice(i, 1);

    for (let i = figEmptyObjects.length-1; i >= 0; i--)
        if (   figEmptyObjects[i].removed
            || nodeIds.includes(figEmptyObjects[i].getPluginData('nodeId')))
            figEmptyObjects.splice(i, 1);

    figma.currentPage
        .findAll(o => nodeIds.includes(o.getPluginData('nodeId')))
        .forEach(o => { if (!o.removed) o.remove(); });

    figObjectArrays = figObjectArrays.filter(a => !nodeIds.includes(a.nodeId));
}



function figDeleteAllObjects(forceDelete = false)
{
    for (const obj of figma.currentPage.children)
    {
        if (    obj.getPluginData('objectId') != ''
            && (   obj.getPluginData('retain') == '0'
                || forceDelete)
            && !obj.removed) 
            obj.remove();
    }
}



function figDeleteObjectsExcept(nodeIds, genIgnoreObjects)
{
    for (let i = figObjectArrays.length-1; i >= 0; i--)
    {
        const figObjArray = figObjectArrays[i];

        if (!nodeIds.includes(figObjArray.nodeId))
            continue;


        for (let j = figObjArray.objects.length-1; j >= 0; j--)
        {
            const figObj = figObjArray.objects[j];
            
            
            if (    figObj.removed
                || !findObject(figObj, genIgnoreObjects))
            {
                if (!figObj.removed)
                    figObj.remove();

                removeFromArray(figObjArray.objects, figObj);

                if (figPoints.includes(figObj))
                    removeFromArray(figPoints, figObj);

                if (figEmptyObjects.includes(figObj))
                    removeFromArray(figEmptyObjects, figObj);
            }

            
            if (  !figObj.removed
                && figObj.getPluginData('retain') == '2')
                clearObjectData(figObj);
        }


        if (isEmpty(figObjArray.objects))
            removeFromArray(figObjectArrays, figObjArray);

    }
}



function findObject(figObj, genIgnoreObjects)
{
    if (   figObj.type == SHAPE_GROUP
        || figObj.type == FRAME)
    {
        for (const child of figObj.children)
        {
            const found = findObject(child, genIgnoreObjects);
            if (found) return found;
        }
    }
    else
    {
        const found = genIgnoreObjects.find(o => 
               o[FO_OBJECT_ID] == figObj.getPluginData('objectId')
            ||    o[FO_RETAIN] > 0
               && o[FO_RETAIN] == figObj.getPluginData('retain'  ));

        if (found) 
            return found;
    }

    
    return null;
}



function figDeleteStylesFromNodeIds(nodeIds, mustDelete)
{
    // styles are deleted first
    
    const paintStyles = figma.getLocalPaintStyles();

    paintStyles
        .filter(s => 
                nodeIds.includes(s.getPluginData('nodeId')))
//            && !parseBool(s.getPluginData('existing')))
        .forEach(s => 
        {
            const nodeId   = s.getPluginData('nodeId');
            const existing = parseBool(s.getPluginData('existing'));
            
            if (!existing) 
            {
                s.remove();
            }
            else if (mustDelete)
            {
                removeFromArrayWhere(figStyleArrays, a => a.nodeId == nodeId);

                s.setPluginData('type',     NULL);
                s.setPluginData('nodeId',   NULL);
                s.setPluginData('existing', NULL);
            }
        });


    if (mustDelete)
        figStyleArrays = figStyleArrays.filter(a => !nodeIds.includes(a.nodeId));
}
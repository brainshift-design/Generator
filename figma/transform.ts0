function getFigmaTransform(tl, tr, bl)
{
    let vr = point(tr.x - tl.x, tr.y - tl.y);
    let vb = point(bl.x - tl.x, bl.y - tl.y);


    let sx = vr.x;
    let sy = vb.y;

    let kx = -vr.y;
    let ky = -vb.x;
    
    let dx = -tl.x;
    let dy = -tl.y;


    const _sx = kx/nozero(sx);
    const _sy = ky/nozero(sy);

    let xform = mulm3m3(
        [[ 1, _sy, 0],
         [_sx, 1,  0],
         [ 0,  0,  1]],
        createTransform(dx, dy));


    xform = inversem3(xform);


    const a = angle(vr);

    if (   a > Tau/4  
        && a < Tau*3/4)
        xform = mulm3m3(xform, createTransform(0, 0, 1, 1, Tau/2));
        
    if (determinant(xform) < 0)
        xform = mulm3m3(xform, createTransform(0, 0, -1, 1, 0));


    return xform;
}



function applyFigmaTransform(figObj, tl, tr, bl) 
{
    const xform = getFigmaTransform(tl, tr, bl);

    figObj.relativeTransform = 
    [
        xform[0],
        xform[1]
    ];
}



function setObjectTransform(figObj, genObj, setSize = true, noHeight = 0.01)
{
    if (   !genObj[FO_XP0]
        || !genObj[FO_XP1]
        || !genObj[FO_XP2])
        return;


    let xp0 = genObj[FO_XP0];
    let xp1 = genObj[FO_XP1];
    let xp2 = genObj[FO_XP2];


    applyFigmaTransform(figObj, xp0, xp1, xp2)
    

    if (setSize)
    {
        const scaleX = distance(xp0, xp1);
        const scaleY = distance(xp0, xp2);
    
        const height =
            genObj[FO_TYPE] == TEXT_SHAPE
            ? genObj[FO_FIG_HEIGHT]
            : genObj[FO_HEIGHT]
    
        if (!figObj.removed)
        {
            figObj.resizeWithoutConstraints(
                         Math.max(0.01, scaleX),
                height ? Math.max(0.01, scaleY) : noHeight);
        }
    }
}


 
function setPointTransform(figPoint, genPoint)
{
    if (figPoint.removed)
        return;


    figPoint.resizeWithoutConstraints(0.01, 0.01);


    figPoint.setPluginData('actualX', genPoint[FO_X].toString());
    figPoint.setPluginData('actualY', genPoint[FO_Y].toString());


    figPoint.x        = genPoint[FO_X];
    figPoint.y        = genPoint[FO_Y];

    figPoint.rotation = genPoint[FO_IS_CENTER] ? 45 : 0;
}



function updateExistingPointTransform(figPoint)
{
    if (!figPoint.removed)
        figPoint.resizeWithoutConstraints(0.01, 0.01);
}
async function figLoadLocal(key)
{
    return await figma.clientStorage.getAsync(key); 
}



function figGetLocalData(key)
{
    figma.clientStorage.getAsync(key).then(data =>
    {
        //console.log('getAsync', data);
        figPostMessageToUi({
            cmd:  'uiGetLocalDataReturn',
            key:   key,
            value: data
        });
    });
}



function figSetLocalData(key, value)
{
    figma.clientStorage.setAsync(key, value); 
}



function figGetPageData(key, postToUi = true)
{
    const data = figma.currentPage.getPluginData(key);

    if (postToUi)
    {
        figPostMessageToUi({
            cmd:  'uiGetPageDataReturn',
            key:   key,
            value: data
        });
    }

    return data;
}



function figSetPageData(key, value)
{
    figClearPageData(key); // remove possible existing values first
    figma.currentPage.setPluginData(key, value);
}



function figClearPageData(key)
{
    figma.currentPage.setPluginData(key, ''); 
}



function figLoadNodesAndConns()
{
    const   nodeKeys = figma.currentPage.getPluginDataKeys().filter(k => k.substring(0,   nodeTag.length+1) ==   nodeTag + ' ');
    const   connKeys = figma.currentPage.getPluginDataKeys().filter(k => k.substring(0,   connTag.length+1) ==   connTag + ' ');
    const activeKeys = figma.currentPage.getPluginDataKeys().filter(k => k.substring(0, activeTag.length+1) == activeTag + ' ');
    
    const nodes      =   nodeKeys.map(k => figma.currentPage.getPluginData(k));
    const conns      =   connKeys.map(k => figma.currentPage.getPluginData(k));
    const active     = activeKeys.map(k => figma.currentPage.getPluginData(k));

    const  nodesJson = JSON.stringify(nodes);
    const  connsJson = JSON.stringify(conns);
    const activeJson = JSON.stringify(active);

    figPostMessageToUi({
        cmd:       'uiLoadNodesAndConns',
        nodesJson:  nodesJson,
        connsJson:  connsJson,
        activeJson: activeJson
    });
}



function figSaveNodes(nodeIds, nodeJson)
{
    for (let i = 0; i < nodeIds.length; i++)
    {
        // console.log('key', nodeName(nodeIds[i]));
        // console.log('value', nodeJson[i]);
        
        figSetPageData(
            nodeName(nodeIds[i]),
            nodeJson[i]
        );        
    }
}



function figRemoveSavedNodesAndConns(nodeIds)
{
    for (let i = 0; i < nodeIds.length; i++)
        figClearPageData(nodeName(nodeIds[i]));        
}



function figRemoveAllSavedNodesAndConns()
{
    const   nodeKeys = figma.currentPage.getPluginDataKeys().filter(k => k.substring(0, 3) == nodeTag   + ' ');
    const activeKeys = figma.currentPage.getPluginDataKeys().filter(k => k.substring(0, 3) == activeTag + ' ');
    const   connKeys = figma.currentPage.getPluginDataKeys().filter(k => k.substring(0, 3) == connTag   + ' ');

    for (const key of   nodeKeys) figClearPageData(key);
    for (const key of activeKeys) figClearPageData(key);
    for (const key of   connKeys) figClearPageData(key);
}



function figLogAllSavedNodesAndConns()
{
    const   nodeKeys = figma.currentPage.getPluginDataKeys().filter(k => k.substring(0, 3) == nodeTag   + ' ');
    const activeKeys = figma.currentPage.getPluginDataKeys().filter(k => k.substring(0, 3) == activeTag + ' ');
    const   connKeys = figma.currentPage.getPluginDataKeys().filter(k => k.substring(0, 3) == connTag   + ' ');

    for (const key of   nodeKeys) console.log(key+'\n', figGetPageData(key, false));
    for (const key of activeKeys) console.log(key+'\n', figGetPageData(key, false));
    for (const key of   connKeys) console.log(key+'\n', figGetPageData(key, false));
}



function figSaveConnection(name, json)
{
    // console.log('key', connName(name));
    // console.log('connection', json);
    
    figSetPageData(connName(name), json);        
}



function figRemoveSavedConnection(name)
{
    figClearPageData(connName(name));        
}



function figRemoveSavedConnectionsToNode(nodeId)
{
    const connKeys = figma.currentPage.getPluginDataKeys().filter(k => k.substring(0, 3) == connTag + ' ');

    for (const key of connKeys)
    {
        const parts = key.split(' ');
        console.log(parts);

        if (parts[3] == nodeId)
            figClearPageData(key);        
    }
}



function figSaveActiveNode(nodeId)
{
    figSetPageData(activeName(nodeId), nodeId);
}



function figRemoveSavedActiveNode(nodeId)
{
    figClearPageData(activeName(nodeId));        
}



function nodeName  (nodeId) { return nodeTag   + ' ' + nodeId; }
function activeName(nodeId) { return activeTag + ' ' + nodeId; }
function connName  (name)   { return connTag   + ' ' + name;   }